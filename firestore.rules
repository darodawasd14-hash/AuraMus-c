/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own information.
 * Public read access is granted to certain collections like /songs, but write access to these collections is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a playlist.
 * - /songs/{songId}: Stores a global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a song.
 * - /users/{userId}/followers/{followerId}: Stores the list of followers for a user.
 * - /users/{userId}/following/{followingId}: Stores the list of users a user is following.
 * - /chats/{chatId}: Stores private chat sessions between users.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a private chat.
 *
 * Key Security Decisions:
 * - Users can only read and write their own playlists and songs within those playlists.
 * - The /songs collection is publicly readable, but write access is restricted to prevent unauthorized modifications.
 * - Users can only read and write messages related to songs.
 * - Users can read and write their own follower and following lists.
 * - Chat access is restricted to participants of the chat.
 * - User listing is not allowed.
 *
 * Denormalization for Authorization:
 * - Where possible, userId is duplicated within documents to avoid the need for complex queries in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create, get, update, delete) - Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, get, update, delete) - Authenticated user can manage their own playlists.
     * @deny (create, get, update, delete) - Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, get, update, delete) - Authenticated user can manage songs in their own playlists.
     * @deny (create, get, update, delete) - Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores all songs added by any user, forming a global catalog. Public read, restricted write.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the song.
     * @deny (create, update, delete) - No user can create, update, or delete a song in this collection without specific authorization.
     * @principle Public read with restricted writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create, get, update, delete) - Any authenticated user can create, read, update, and delete messages.
     * @deny (create, get, update, delete) - Non-authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Manages the list of followers for a user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (create, get, update, delete) - Authenticated user can manage their own followers.
      * @deny (create, get, update, delete) - Any other user.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Manages the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create, get, update, delete) - Authenticated user can manage their own following list.
     * @deny (create, get, update, delete) - Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Manages private chat sessions between users.
     * @path /chats/{chatId}
     * @allow (create, get, update, delete) - Only participants can access the chat.
     * @deny (create, get, update, delete) - Non-participants.
     * @principle Shared Access (Closed Collaborators).
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }
      function canUpdateParticipants() {
          return isSignedIn() && (resource.data.participantIds.size() <= 2 || request.auth.uid in resource.data.participantIds);
      }

      allow get: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow delete: if false;
    }

    /**
     * @description Stores messages within a specific private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create, get, update, delete) - Only participants of the chat can manage messages.
     * @deny (create, get, update, delete) - Non-participants.
     * @principle Shared Access (Closed Collaborators).
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isChatParticipant(chatId) {
          return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }

      allow get: if isChatParticipant(chatId);
      allow list: if isChatParticipant(chatId);
      allow create: if isChatParticipant(chatId) ;
      allow update: if false;
      allow delete: if false;
    }
  }
}