/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-based ownership and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Read access is granted to any signed-in user. Write access is restricted to the owner.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by a user. Access is restricted to the owner.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a playlist. Access is restricted to the owner.
 * - /songs/{songId}: Stores a global catalog of songs. Read access is public. Write access is not defined in the schema, and therefore explicitly denied.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song. Access is public for reads and restricted to signed-in users for writes.
 * - /users/{userId}/followers/{followerId}: Stores the list of followers for a user. Access is restricted to the owner.
 * - /users/{userId}/following/{followingId}: Stores the list of users a user is following. Access is restricted to the owner.
 * - /chats/{chatId}: Represents a private chat session between users.  Access is granted to participants of the chat.
 * - /chats/{chatId}/messages/{messageId}: Stores messages for a specific chat room. Access is granted to participants of the chat.
 *
 * Key Security Decisions:
 * - Users can read any user profile, but only modify their own.
 * - Public read access for the /songs/{songId} collection facilitates discovery and playback.
 * - Shared access via participantIds for /chats/{chatId} enables private messaging.
 * - User listing is disabled for all collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Any signed-in user can read a user profile.
     * @allow (create, update, delete) Only the user with a matching ID can create, update, or delete their profile.
     * @deny Any user attempting to create a profile with an ID that doesn't match their auth UID.
     * @principle Enforces user ownership for writes, allows public reads for signed-in users.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (get, list) Only the owner can read and list their playlists.
     * @allow (create) Only the owner can create playlists in their own user document, and the userId must match.
     * @allow (update, delete) Only the owner can update or delete their own playlists, and they must exist.
     * @deny Any user attempting to create, update, or delete playlists in another user's document.
     * @principle Enforces user ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get, list) Only the owner can read and list songs in their own playlist.
     * @allow (create) Only the owner can create songs in their own playlist.
     * @allow (update, delete) Only the owner can update or delete songs in their own playlist.
     * @deny Any user attempting to create, update, or delete songs in another user's playlist.
     * @principle Enforces user ownership for playlist songs.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global songs catalog.
     * @path /songs/{songId}
     * @allow (get, list) Allows public read access to the song catalog.
     * @deny (create, update, delete) Denies all write operations (no owner defined in the schema).
     * @principle Allows public read access to songs, but strictly prohibits modifications.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // CRITICAL: No owner-only writes can be safely implemented without an authorId field on the Song entity.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Allows public read access to chat messages.
     * @allow (create) Only signed-in users can create messages.
     * @allow (update, delete) No update or delete allowed.
     * @principle Allows public reading of messages but restricts write access to signed-in users.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) Only the owner can list their followers.
     * @allow (create) Only the owner can add followers.
     * @allow (update, delete) Only the owner can update or delete followers.
     * @principle Enforces user ownership for managing followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) Only the owner can list who they are following.
     * @allow (create) Only the owner can add to their following list.
     * @allow (update, delete) Only the owner can update or delete from their following list.
     * @principle Enforces user ownership for managing the following list.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to private chat sessions between users.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants of the chat can access it.
     * @allow (create) Only users who are creating a chat session they are a part of.
     * @allow (update) Only users who are participants of the chat can update it, and it must exist.
     * @allow (delete) Participants are granted ability to delete chats.
     * @principle Enforces shared access based on the participantIds array.
     */
    match /chats/{chatId} {
      allow get, list: if request.auth.uid in resource.data.participantIds;
      allow create: if request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if request.auth.uid in resource.data.participantIds && resource != null;
      allow delete: if request.auth.uid in resource.data.participantIds && resource != null;
    }

    /**
     * @description Controls access to messages within a private chat session.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Only participants of the chat can access messages.
     * @allow (create) Only participants of the chat can create messages.
     * @allow (update, delete) No update or delete is allowed in the IR.
     * @principle Enforces shared access based on the parent chat's participantIds array.
     */
    match /chats/{chatId}/messages/{messageId} {
        allow get, list: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}