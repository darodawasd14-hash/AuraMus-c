/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and songs,
 * allowing each user to manage their own data. Chat messages and live listeners
 * for songs are publicly readable, but only authenticated users can create them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /users/{userId}/songs/{songId}: Stores songs owned by a specific user.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for each song.
 *   Any authenticated user can create a message.
 * - /songs/{songId}/live_listeners/{userId}: Stores the current listeners for a song.
 *   Any authenticated user can add themselves as a listener.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and songs.
 * - All authenticated users can read and write chat messages and live listeners.
 * - The rules do NOT enforce the schema of the data being written, except
 *   for validating ownership on `create` operations in `/users/{userId}`.
 *
 * Denormalization for Authorization:
 * - The rules rely on path-based authorization and do not require denormalization.
 *   The `userId` is extracted from the path, and access is granted based on
 *   whether the `request.auth.uid` matches the `userId`.
 *
 * Structural Segregation:
 * - The application uses user-specific subcollections (/users/{userId}/songs/{songId})
 *   to store private song data. This ensures that users can only access their own songs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /artifacts/Aura/users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile at /artifacts/Aura/users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /artifacts/Aura/users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, and delete the profile at /artifacts/Aura/users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to manage their own songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) - User with UID 'user_abc' can create a song at /artifacts/Aura/users/user_abc/songs/song_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their song at /artifacts/Aura/users/user_abc/songs/song_123.
     * @deny (create) - User with UID 'user_xyz' cannot create a song at /artifacts/Aura/users/user_abc/songs/song_123.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, and delete song at /artifacts/Aura/users/user_abc/songs/song_123.
     * @principle Enforces document ownership for writes within a user's data tree.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any authenticated user to create messages for a song, and allows anyone to read messages.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) - Any user can read messages for a song.
     * @allow (create) - Authenticated user can create messages for a song.
     * @deny (update, delete) - Only authenticated user can create messages for a song, so updates and deletes are not permitted
     * @principle Allows public read access with authentication required for writes.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to add themselves as a live listener for a song, and allows anyone to read the list of live listeners.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (get, list) - Any user can read the list of live listeners for a song.
     * @allow (create) - Authenticated user can add themselves as a live listener for a song.
     * @deny (update, delete) - Only authenticated user can create a new listener, so updates and deletes are not permitted
     * @principle Allows public read access with authentication required for writes.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}