/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, playlists, and follow relationships.
 * Public read access is granted to the global song catalog, while write access is restricted to owners.
 * Chat data is secured using a shared access model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with subcollections for playlists, followers, and followees.
 * - /songs/{songId}: Stores a global catalog of songs, with subcollections for chat messages.
 * - /chats/{chatId}: Stores private chat sessions between users, with subcollections for messages.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and associated playlists and follows.
 * - The song catalog is publicly readable but only writable by authorized users (owner-only writes).
 * - Listing all users is disallowed.
 * - Chat access is restricted to participants in the chat.
 *
 * Denormalization for Authorization:
 * - Playlist documents contain a `userId` field to enable owner-based security rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions.  No direct read or write access to the root.
     * @path /
     * @allow (get, list) Always denied at root.
     * @deny (create, update, delete) Always denied at root.
     * @principle Prevents unintended access at the root level of the database.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection.  Ensures users can only access their own profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can only access their own profile data.
     * @deny (create) Unauthenticated users cannot create user profiles.
     * @deny (get, update, delete) Users cannot access or modify other user profiles.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/playlists/{playlistId} collection.  Ensures users can only access their own playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) Authenticated user can create a playlist under their user ID.
     * @allow (get, list, update, delete) Authenticated user can only access their own playlists.
     * @deny (create) Unauthenticated users cannot create playlists.
     * @deny (get, list, update, delete) Users cannot access or modify other user's playlists.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/playlists/{playlistId}/songs/{songId} collection.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) Authenticated user can create a song in their playlist.
     * @allow (get, list, update, delete) Authenticated user can only access songs in their own playlists.
     * @deny (create) Unauthenticated users cannot create songs.
     * @deny (get, list, update, delete) Users cannot access or modify songs in other user's playlists.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /songs/{songId} collection.  Allows public read access but restricts writes to owners.
     * @path /songs/{songId}
     * @allow (get, list) Public read access to all songs.
     * @deny (create, update, delete) Only the owner can modify songs.
     * @principle Provides a public song catalog with restricted write access.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Song' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for the /songs/{songId}/messages/{messageId} collection.  Allows access to messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Anyone can read the messages.
     * @allow (create) Any authenticated user can create a message.
     * @deny (update, delete) Only the message creator can update or delete a message.
     * @principle Open access for reading and creating messages with restricted modification rights.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Rules for the /users/{userId}/followers/{followerId} collection.  Ensures users can only manage their own followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) Authenticated user can have followers.
     * @allow (get, list, update, delete) Authenticated user can only access their own followers data.
     * @deny (create) Unauthenticated users cannot have followers.
     * @deny (get, list, update, delete) Users cannot access or modify other user's followers.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Rules for the /users/{userId}/following/{followingId} collection.  Ensures users can only manage who they are following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) Authenticated user can follow other users.
     * @allow (get, list, update, delete) Authenticated user can only access their own following data.
     * @deny (create) Unauthenticated users cannot follow other users.
     * @deny (get, list, update, delete) Users cannot access or modify other user's following.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /chats/{chatId} collection.  Restricts chat access to participants.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can read chat metadata.
     * @allow (create) Any authenticated user can create a chat.
     * @allow (update, delete) Only participants can modify chat metadata.
     * @deny (get, list, create, update, delete) Non-participants cannot access chat metadata.
     * @principle Enforces shared access control for chat rooms.
     */
    match /chats/{chatId} {
      allow get, list: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds && resource != null;
      allow delete: if false; // Deleting a chat is not permitted in this version
    }

    /**
     * @description Rules for the /chats/{chatId}/messages/{messageId} collection.  Restricts message access to chat participants.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Only participants can read messages.
     * @allow (create) Any authenticated user can create a message in a chat they participate in.
     * @deny (update, delete) Only the message creator can update or delete a message.
     * @principle Enforces shared access control for chat messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update: if false; // Updating a chat message is not permitted in this version.
      allow delete: if false; // Deleting a chat message is not permitted in this version.
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the current user is signed in.
     * @param {void}
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the userId matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID and that the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the userId matches the authenticated user's UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}