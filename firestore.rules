/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated playlists and songs.
 * Public read access is granted to the global song catalog.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by the user, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a specific playlist, accessible only to the owning user.
 * - /songs/{songId}: Stores a global catalog of songs, publicly readable, but only updatable by the song's creator.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song, accessible to anyone.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles, playlists, and songs within those playlists.
 * - The global song catalog is publicly readable to facilitate discovery.
 * - User listing is explicitly disallowed to prevent data scraping and privacy breaches.
 * - Users can follow other users, and can only manage their own follow relationships.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn helper function.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner helper function.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner helper function.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the song has the expected ownership.
     */
    function isSongOwner(ownerId) {
        return request.auth.uid == ownerId;
    }

    /**
     * @description Checks if the song has the expected ownership when already existing in database.
     */
    function isExistingSongOwner(ownerId) {
        return isSongOwner(ownerId) && resource != null;
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile with matching userId.
     * @allow (get, update, delete) - A user can get, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - A user can create playlists under their own profile.
     * @allow (get, list, update, delete) - A user can manage their own playlists.
     * @deny (create) - A user cannot create playlists under another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Rules for songs within a user playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - A user can add songs to their own playlists.
     * @allow (get, list, update, delete) - A user can manage songs within their own playlists.
     * @deny (create) - A user cannot add songs to playlists they do not own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the global song catalog.
     * @allow (create) - Any signed-in user can add songs to the global catalog, but must set the correct authorId.
     * @allow (update, delete) - Only the song's creator can update or delete it.
     * @deny (create) - Prevent creating a song without a valid authorId.
     * @principle Public read access with owner-only writes, validates relational integrity between documents.
     */
    match /songs/{songId} {
      allow get, list: if true;

      allow create: if isSignedIn();
      allow update: if isExistingSongOwner(resource.data.ownerId);
      allow delete: if isExistingSongOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for chat messages associated with a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create) - Any user can read existing messages and create new ones.
     * @deny (update, delete) - Messages cannot be updated or deleted.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list, create: if isSignedIn();
      allow update, delete: if false;
    }
    
    /**
     * @description Rules for followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) - A user can follow another user.
     * @allow (get, list) - A user can see their followers.
     * @deny (update, delete) - Follower relationships cannot be updated or deleted directly; only created.
     * @principle Users can manage their own follow relationships.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == followerId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for users that a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) - A user can follow another user.
     * @allow (get, list) - A user can see who they are following.
     * @deny (update, delete) - Follower relationships cannot be updated or deleted directly; only created.
     * @principle Users can manage their own follow relationships.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }
  }
}