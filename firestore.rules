/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model.  Users can only
 * read and write their own data, unless explicitly specified otherwise.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within playlists.
 * - /songs/{songId}: Stores all songs, creating a global catalog. Publicly readable.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song.
 * - /users/{userId}/followers/{followerId}: Stores the followers of a specific user.
 * - /users/{userId}/following/{followingId}: Stores the users a specific user is following.
 * - /chats/{chatId}: Stores private chat rooms.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within private chat rooms.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data and playlists.
 * - Song data is publicly readable, but creation and modification are not allowed in this prototype.
 * - Followers and Following subcollections restricted to owner only.
 * - Private chats are restricted to participants.
 *
 * Denormalization for Authorization:
 *  - Playlist and Song documents do not contain redundant authorization data. Instead, the path
 *    `/users/{userId}/playlists/{playlistId}` is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for managing user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, list, update, delete) Only the authenticated user can access their own profile.
     * @deny (create) Creating a profile with an ID that doesn't match the authenticated user's ID.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, get, list, update, delete) Only the authenticated user can manage their own playlists.
     * @deny (create) Creating a playlist with an incorrect userId.
     * @principle Enforces document ownership through path.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, get, list, update, delete) Only the authenticated user can manage songs in their own playlists.
     * @principle Enforces document ownership through path.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for accessing the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) All users can read song data.
     * @deny (create, update, delete) Song creation, updates, and deletions are disallowed in this prototype.
     * @principle Allows public read access with restricted writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create, get, list) Any authenticated user can create/read messages.
     * @deny (update, delete) Message updates and deletions are disallowed.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for managing user followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list, create, update, delete) Only the owner can manage their followers.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing who a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list, create, update, delete) Only the owner can manage who they are following.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing private chats between users.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can read the chat.
     * @allow (create) Any authenticated user can initiate a chat.
     * @allow (update) Only participants can update the chat metadata (e.g., last message).
     * @allow (delete) Deletion is not allowed in this prototype.
     * @principle Enforces shared access based on participant list.
     */
    match /chats/{chatId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isParticipant(participantIds) {
            return isSignedIn() && participantIds.hasAny([request.auth.uid]);
        }

        allow get, list: if isParticipant(resource.data.participantIds);
        allow create: if isSignedIn();
        allow update: if isParticipant(resource.data.participantIds) && resource != null;
        allow delete: if false;
    }

    /**
     * @description Rules for managing messages within a private chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list, create) Only participants can read and create messages.
     * @deny (update, delete) Message updates and deletions are disallowed.
     * @principle Enforces shared access based on chat participation.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isChatParticipant(chatId) {
            return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        }

        allow get, list: if isSignedIn() && isChatParticipant(chatId);
        allow create: if isSignedIn() && isChatParticipant(chatId);
        allow update, delete: if false;
    }
  }
}