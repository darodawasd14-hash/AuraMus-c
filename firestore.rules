/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with a mix of public and private data.
 * Users own their profile data and playlists, while songs are stored in a global catalog accessible to all.
 * Private chats are secured to only allow participating members to read and write messages.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist.
 * - /songs/{songId}: A global catalog of songs, accessible to all users.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song.
 * - /users/{userId}/followers/{followerId}: List of followers for a user.
 * - /users/{userId}/following/{followingId}: List of users a user is following.
 * - /chats/{chatId}: Private chat sessions between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Playlists are owned by the user and only accessible by the user.
 * - The global song catalog is publicly readable, but modifications are restricted.
 * - Chat messages are only accessible to the participants of the chat.
 * - Listing of followers and following is allowed for the user.
 *
 * Denormalization for Authorization:
 * - Playlist documents have a `userId` field to easily check ownership.
 * - Chat documents have a `participantIds` array to quickly verify membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User 'testUID' can create their own profile.
     * @allow (read) User 'testUID' can read their own profile.
     * @allow (update) User 'testUID' can update their own profile.
     * @allow (delete) User 'testUID' can delete their own profile.
     * @deny (create) User 'anotherUID' cannot create a profile with ID 'testUID'.
     * @deny (read) User 'anotherUID' cannot read profile with ID 'testUID'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User 'testUID' can create a playlist in their own profile.
     * @allow (read) User 'testUID' can read a playlist in their own profile.
     * @allow (update) User 'testUID' can update a playlist in their own profile.
     * @allow (delete) User 'testUID' can delete a playlist in their own profile.
     * @deny (create) User 'anotherUID' cannot create a playlist in user 'testUID' profile.
     * @deny (read) User 'anotherUID' cannot read a playlist in user 'testUID' profile.
     * @principle Enforces document ownership for user playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User 'testUID' can add a song to their own playlist.
     * @allow (read) User 'testUID' can read a song in their own playlist.
     * @allow (update) User 'testUID' can update a song in their own playlist.
     * @allow (delete) User 'testUID' can delete a song in their own playlist.
     * @deny (create) User 'anotherUID' cannot add a song to user 'testUID' playlist.
     * @deny (read) User 'anotherUID' cannot read a song in user 'testUID' playlist.
     * @principle Enforces document ownership for songs within a playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (read) Anyone can read songs from the global catalog.
     * @deny (create) Only authenticated users can create songs.
     * @deny (update) Only authenticated users can update songs.
     * @deny (delete) Only authenticated users can delete songs.
     * @principle Public read access, owner-only writes (requires 'ownerId' field).
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (read) Any signed-in user can read a message.
     * @allow (update) Only the message sender can update the message.
     * @allow (delete) Only the message sender can delete the message.
     * @principle  Allows anyone to read and create messages, but only the sender can update or delete.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.sender.uid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.sender.uid;
    }
    
    /**
     * @description Controls who can access the followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (list) The owner can list their followers.
     * @allow (create) The owner can add followers.
     * @allow (get) The owner can get follower's data
     * @allow (update) The owner can update followers.
     * @allow (delete) The owner can delete followers.
     * @principle The owner can manage followers.
     */
     match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if get(/databases/$(database)/documents/users/$(userId)).data.uid == request.auth.uid;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
      }

      /**
       * @description Controls who can access the following list of a user.
       * @path /users/{userId}/following/{followingId}
       * @allow (list) The owner can list who they are following.
       * @allow (create) The owner can add to their following list.
       * @allow (get) The owner can get a user's data they follow.
       * @allow (update) The owner can update following
       * @allow (delete) The owner can delete from their following list.
       * @principle The owner can manage who they are following.
       */
      match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if get(/databases/$(database)/documents/users/$(userId)).data.uid == request.auth.uid;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
      }

    /**
     * @description Controls access to private chat sessions.
     * @path /chats/{chatId}
     * @allow (create) Anyone can create a chat.
     * @allow (read) Only participants can read the chat.
     * @allow (update) Only participants can update the chat.
     * @allow (delete) Only participants can delete the chat.
     * @principle  Restricts access to chat sessions to only participating members.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
        return request.auth.uid in resource.data.participantIds;
      }
      allow get, list: if isSignedIn() && isParticipant();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isParticipant();
      allow delete: if isSignedIn() && isParticipant();
    }

    /**
     * @description Controls access to messages within a private chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) Only participants can create messages.
     * @allow (read) Only participants can read messages.
     * @allow (update) Only the message sender can update the message.
     * @allow (delete) Only the message sender can delete the message.
     * @principle  Restricts access to chat messages to only participating members and senders.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isChatParticipant(chatId) {
            return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        }
      allow get, list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update: if isSignedIn() && request.auth.uid == resource.data.sender.uid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.sender.uid;
    }
  }
}