rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, ensuring users can only manage their own profiles.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) - User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can create their profile if request.auth.uid == userId.
     * @allow (get, list, update, delete) - User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can read, update, and delete their profile.
     * @deny (create) - User 'OtherUserId' cannot create a profile for 'JLvgYwvueSNh9ywBxkJZJi9CkjI2'.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/Aura/users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      //function
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures user-specific songs, ensuring users can only manage their own songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) - User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can create a song under their profile.
     * @allow (get, list, update, delete) - User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can read, update, and delete their songs.
     * @deny (create) - User 'OtherUserId' cannot create a song for 'JLvgYwvueSNh9ywBxkJZJi9CkjI2'.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      //function
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures chat messages for songs, allowing public read access but restricting creation to authenticated users.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) - Anyone can read messages for a song.
     * @allow (create) - Authenticated users can create messages.
     * @deny (update, delete) - No one can update or delete messages.
     * @principle Allows public read access with authenticated-user writes.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      //function
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures live listener tracking, ensuring only authenticated users can register as listeners.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (create) - Authenticated user 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can register as a listener for a song, if request.auth.uid == userId.
     * @allow (get) - Authenticated user can get a listener.
     * @allow (delete) - Authenticated user can remove themself as a listener, if resource != null.
     * @deny (create) - User 'OtherUserId' cannot register 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' as a listener.
     * @principle Enforces document ownership and authentication for write operations.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      //function
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }
  }
}