rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', displayName: 'Test User', email: 'test@example.com' }
     * @allow (get, list) User with ID 'user123' can read their profile.
     *   - auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update their profile.
     *   - auth: { uid: 'user123' }
     *   - resource.data: { id: 'user123', displayName: 'Updated Name' }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - auth: { uid: 'user456' }
     *   - request.resource.data: { id: 'user123' }
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     *   - auth: { uid: 'user456' }
     *   - resource.data: { id: 'user123' }
     * @principle Enforces document ownership for reads and writes, validates ownership on create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user-specific playlist documents.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', name: 'My Playlist' }
     * @allow (get, list) Any signed-in user can read the playlist.
     *   - auth: { uid: 'user456' }
     * @allow (update) User with ID 'user123' can update their playlist.
     *   - auth: { uid: 'user123' }
     *   - resource.data: { userId: 'user123', name: 'Updated Playlist Name' }
     * @deny (create) User with ID 'user456' cannot create a playlist under 'user123's profile.
     *   - auth: { uid: 'user456' }
     *   - request.resource.data: { userId: 'user123' }
     * @deny (update) User with ID 'user456' cannot update 'user123's playlist.
     *   - auth: { uid: 'user456' }
     *   - resource.data: { userId: 'user123' }
     * @principle Enforces playlist ownership, allows public reads for signed-in users.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a specific playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User 'user123' can add a song to their playlist.
     *   - auth: { uid: 'user123' }
     * @allow (get, list) User 'user123' can view songs in their playlist.
     *   - auth: { uid: 'user123' }
     * @allow (update) User 'user123' can update songs in their playlist.
     *   - auth: { uid: 'user123' }
     * @deny (create) User 'user456' cannot add a song to 'user123's playlist.
     *   - auth: { uid: 'user456' }
     * @deny (update) User 'user456' cannot update songs in 'user123's playlist.
     *   - auth: { uid: 'user456' }
     * @principle Enforces ownership for playlist song management.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isPlaylistOwner(userId, playlistId);
      allow list: if isPlaylistOwner(userId, playlistId);
      allow create: if isPlaylistOwner(userId, playlistId);
      allow update: if isPlaylistOwner(userId, playlistId);
      allow delete: if isPlaylistOwner(userId, playlistId);
    }

    /**
     * @description Controls access to all song documents in the global catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read any song.
     *   - auth: { uid: 'user123' }
     * @allow (create) Any signed-in user can create a song.
     *   - auth: { uid: 'user123' }
     * @allow (update) Any signed-in user can update a song.
     *   - auth: { uid: 'user123' }
     * @allow (delete) Any signed-in user can delete a song.
     *   - auth: { uid: 'user123' }
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Any user can read messages for any song.
     *   - auth: { uid: 'user123' }
     * @allow (create) Any signed-in user can create a message.
     *   - auth: { uid: 'user123' }
     * @allow (update) Any signed-in user can update a message.
     *   - auth: { uid: 'user123' }
     * @allow (delete) Any signed-in user can delete a message.
     *   - auth: { uid: 'user123' }
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to a user's list of followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) Any signed-in user can view the followers of another user.
     *   - auth: { uid: 'user123' }
     * @allow (create) User 'user123' can add a follower to their list.
     *   - auth: { uid: 'user123' }
     * @allow (delete) User 'user123' can remove a follower from their list.
     *   - auth: { uid: 'user123' }
     * @deny (create) User 'user456' cannot add a follower to 'user123's list.
     *   - auth: { uid: 'user456' }
     * @deny (delete) User 'user456' cannot remove a follower from 'user123's list.
     *   - auth: { uid: 'user456' }
     * @principle Enforces owner-only write access with public read access for followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) Any signed-in user can view who another user is following.
     *   - auth: { uid: 'user123' }
     * @allow (create) User 'user123' can add to their following list.
     *   - auth: { uid: 'user123' }
     * @allow (delete) User 'user123' can remove from their following list.
     *   - auth: { uid: 'user123' }
     * @deny (create) User 'user456' cannot modify 'user123's following list.
     *   - auth: { uid: 'user456' }
     * @deny (delete) User 'user456' cannot modify 'user123's following list.
     *   - auth: { uid: 'user456' }
     * @principle Enforces owner-only write access with public read access for following.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get, list) Users who are participants in the chat can access it.
     *   - auth: { uid: 'user123' }
     *   - resource.data: { participantIds: ['user123', 'user456'] }
     * @allow (create) Users can create a new chat room if they are participants.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { participantIds: ['user123', 'user456'] }
     * @allow (update) Users who are participants can update chat metadata (e.g., last message).
     *   - auth: { uid: 'user123' }
     *   - resource.data: { participantIds: ['user123', 'user456'], lastMessage: 'Hello!' }
     * @allow (delete) Users who are participants can delete the chat room.
     *   - auth: { uid: 'user123' }
     *   - resource.data: { participantIds: ['user123', 'user456'] }
     * @deny (get, list) User 'user789' cannot access chat if not a participant.
     *   - auth: { uid: 'user789' }
     *   - resource.data: { participantIds: ['user123', 'user456'] }
     * @principle Enforces access control based on chat participants.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && isChatParticipant(resource.data.participantIds);
      allow list: if isSignedIn() && isChatParticipant(resource.data.participantIds);
      allow create: if isSignedIn() && isChatParticipant(request.resource.data.participantIds);
      allow update: if isSignedIn() && isChatParticipant(resource.data.participantIds);
      allow delete: if isSignedIn() && isChatParticipant(resource.data.participantIds);
    }

    /**
     * @description Controls access to messages within a specific chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Users who are participants in the chat can access the messages.
     *   - auth: { uid: 'user123' }
     *   - parent chat: { participantIds: ['user123', 'user456'] }
     * @allow (create) Users who are participants in the chat can send messages.
     *   - auth: { uid: 'user123' }
     *   - parent chat: { participantIds: ['user123', 'user456'] }
     * @allow (update) Users who are participants can update their own messages.
     *   - auth: { uid: 'user123' }
     *   - parent chat: { participantIds: ['user123', 'user456'] }
     * @allow (delete) Users who are participants can delete their own messages.
     *   - auth: { uid: 'user123' }
     *   - parent chat: { participantIds: ['user123', 'user456'] }
     * @deny (get, list) User 'user789' cannot access messages if not a chat participant.
     *   - auth: { uid: 'user789' }
     *   - parent chat: { participantIds: ['user123', 'user456'] }
     * @principle Enforces access control based on chat participants for messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow list: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow create: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow update: if isSignedIn() && request.auth.uid == resource.data.senderId && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && resource.data.id == userId;
  }

  function isChatParticipant(participantIds) {
      return participantIds is list && request.auth.uid in participantIds;
  }

  function isPlaylistOwner(userId, playlistId) {
    return request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == userId;
  }
}