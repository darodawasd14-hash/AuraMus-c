/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and prevents unauthorized access to private user data.
 * It leverages Firebase Authentication to verify user identity and enforce granular permissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible to authenticated users.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by a specific user, accessible only by that user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a specific playlist, accessible only by the playlist owner.
 * - /songs/{songId}: Stores all songs added by any user, publicly readable, but writable only with a valid user ID.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a song, accessible to authenticated users.
 * - /users/{userId}/followers/{followerId}: Stores followers of a user, only accessible to the user.
 * - /users/{userId}/following/{followingId}: Stores users being followed by a user, only accessible to the user.
 * - /chats/{chatId}: Stores chat metadata, accessible only to participants.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a chat, accessible only to chat participants.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Public read access is granted to the /songs collection to allow browsing without authentication.
 * - All write operations require authentication and ownership validation.
 *
 * Denormalization for Authorization:
 *  - The `userId` field is present on both Playlist and Song documents under the `/users/{userId}` path for efficient ownership checks without additional reads.
 *  - `participantIds` is present on Chat documents to avoid needing to query a subcollection for participant information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read any user profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update, delete) Authenticated user can update or delete their own profile.
     * @deny (get) Non-authenticated user cannot read user profiles.
     * @deny (create) Authenticated user cannot create a profile with a mismatched user ID.
     * @deny (update, delete) Authenticated user cannot update or delete another user's profile.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines access rules for playlists under a user's profile.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (get, list) Authenticated user can read/list their own playlists.
     * @allow (create) Authenticated user can create playlists under their own profile.
     * @allow (update, delete) Authenticated user can update or delete their own playlists.
     * @deny (get, list) Authenticated user cannot read/list another user's playlists.
     * @deny (create) Authenticated user cannot create playlists under another user's profile.
     * @deny (update, delete) Authenticated user cannot update or delete another user's playlists.
     * @principle Enforces user ownership for playlist data.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines access rules for songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get, list) Authenticated user can read/list songs in their own playlists.
     * @allow (create) Authenticated user can create songs in their own playlists.
     * @allow (update, delete) Authenticated user can update or delete songs in their own playlists.
     * @deny (get, list) Authenticated user cannot read/list songs in another user's playlists.
     * @deny (create) Authenticated user cannot create songs in another user's playlists.
     * @deny (update, delete) Authenticated user cannot update or delete songs in another user's playlists.
     * @principle Enforces user ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Defines access rules for users following a particular user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (get, list) Authenticated user can read/list their own followers.
      * @allow (create) Authenticated user can create their own followers list.
      * @allow (update, delete) Authenticated user can update or delete their own followers list.
      * @deny (get, list) Authenticated user cannot read/list another user's followers.
      * @deny (create) Authenticated user cannot create followers list for another user.
      * @deny (update, delete) Authenticated user cannot update or delete another user's followers.
      * @principle Enforces user ownership for followers.
      */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines access rules for users being followed by a particular user.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) Authenticated user can read/list the users they are following.
     * @allow (create) Authenticated user can create their own following list.
     * @allow (update, delete) Authenticated user can update or delete their own following list.
     * @deny (get, list) Authenticated user cannot read/list another user's following list.
     * @deny (create) Authenticated user cannot create following list for another user.
     * @deny (update, delete) Authenticated user cannot update or delete another user's following list.
     * @principle Enforces user ownership for following.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines access rules for the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read/list songs in the catalog.
     * @allow (create) Authenticated user can add new songs to the catalog.
     * @allow (update, delete) Authenticated user can update or delete songs they own.
     * @deny (create) Non-authenticated user cannot add songs to the catalog.
     * @deny (update, delete) Authenticated user cannot update or delete songs they don't own.
     * @principle Allows public read access but enforces ownership for write access.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/songs/$(songId)).data.userId == request.auth.uid;
    }

    /**
     * @description Defines access rules for chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Authenticated user can read/list messages for a song.
     * @allow (create) Authenticated user can create messages for a song.
     * @allow (update, delete) Authenticated user can update or delete their own messages.
     * @deny (create) Non-authenticated user cannot create messages.
     * @deny (update, delete) Authenticated user cannot update or delete other user's messages.
     * @principle Enforces user ownership for messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/songs/$(songId)/messages/$(messageId)).data.sender.uid == request.auth.uid;
    }

    /**
     * @description Defines access rules for private chats between users.
     * @path /chats/{chatId}
     * @allow (get, list) Authenticated user can read/list chats they participate in.
     * @allow (create) Authenticated user can create a chat if they are a participant.
     * @allow (update) Authenticated user can update a chat if they are a participant.
     * @allow (delete) Authenticated user can delete a chat if they are the owner.
     * @deny (get, list) Authenticated user cannot read/list chats they don't participate in.
     * @deny (create) Authenticated user cannot create chats they are not a participant of.
     * @deny (update) Authenticated user cannot update chats they don't participate in.
     * @deny (delete) Authenticated user cannot delete chats they don't own.
     * @principle Enforces shared access between participants for chats.
     */
    match /chats/{chatId} {
      allow get, list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow delete: if false; // Chats should probably not be deletable
    }

    /**
     * @description Defines access rules for messages within a private chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Authenticated user can read/list messages in chats they participate in.
     * @allow (create) Authenticated user can create messages in chats they participate in.
     * @allow (update, delete) Authenticated user can update or delete their own messages in the chat.
     * @deny (get, list) Authenticated user cannot read/list messages in chats they don't participate in.
     * @deny (create) Authenticated user cannot create messages in chats they don't participate in.
     * @deny (update, delete) Authenticated user cannot update or delete messages of other users in chats they participate in.
     * @principle Enforces shared access and ownership for messages within chats.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.sender.uid == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
    }
  }
}