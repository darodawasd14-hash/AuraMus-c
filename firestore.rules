/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for playlists.
 * Users can only read and write their own playlist data. Public read access is granted to the global song catalog.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlist/{songId}: Stores a user's playlist songs.
 * - /songs/{songId}: Stores a global catalog of songs added by all users.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song.
 *
 * Key Security Decisions:
 * - Users can only list their own playlists.
 * - The global songs collection is publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to user profile information, restricted to the user themselves.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read and write access to a user's playlist, restricted to the user themselves.
     * @path /users/{userId}/playlist/{songId}
     * @allow (create) User with ID 'user123' can create a song in their playlist.
     * @allow (get) User with ID 'user123' can read a song in their playlist.
     * @allow (update) User with ID 'user123' can update a song in their playlist.
     * @allow (delete) User with ID 'user123' can delete a song in their playlist.
     * @allow (list) User with ID 'user123' can list songs in their playlist.
     * @deny (create) User with ID 'user456' cannot create a song in user 'user123's playlist.
     * @principle Enforces document ownership for writes and limits listing to the owner.
     */
    match /users/{userId}/playlist/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to the global song catalog. Only the owner can write.
     * @path /songs/{songId}
     * @allow (get) Any user can read a song from the catalog.
     * @allow (list) Any user can list songs from the catalog.
     * @allow (create) User with ID 'user123' can create a song with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update a song if they are the owner.
     * @allow (delete) User with ID 'user123' can delete a song if they are the owner.
     * @deny (create) User with ID 'user456' cannot create a song with authorId 'user123'.
     * @principle Allows public reads, enforces document ownership for writes, and validates authorId on create.
     */
    match /songs/{songId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Allows read and write access to messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     */
    match /songs/{songId}/messages/{messageId} {
       allow get, list, create, update, delete: if true;
    }
  }
}