/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model with public read access to the `songs` collection and private access to user-specific data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlists/{playlistId}: Stores user playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a playlist.
 * - /songs/{songId}: Stores a global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song.
 * - /users/{userId}/followers/{followerId}: Stores followers of a user.
 * - /users/{userId}/following/{followingId}: Stores users a user is following.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user data and playlists.
 * - The `songs` collection is publicly readable, but only owners can create, update, or delete songs (owner is not yet implemented because there is no ownerId on the Song entity).
 * - Listing of followers/following is allowed only for the user.
 *
 * Denormalization for Authorization:
 * - The `userId` field in the `Playlist` document is used to enforce ownership, avoiding the need for additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *     - auth.uid: 'user123'
     *     - request.resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched ID.
     *     - auth.uid: 'user123'
     *     - request.resource.data.id: 'user456'
     * @allow (get) User can retrieve their own profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (get) User cannot retrieve another user's profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (update) User can update their own profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (update) User cannot update another user's profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (delete) User can delete their own profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (delete) User cannot delete another user's profile.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist.
     *     - auth.uid: 'user123'
     *     - request.resource.data.userId: 'user123'
     * @deny (create) User with ID 'user123' cannot create a playlist for another user.
     *     - auth.uid: 'user123'
     *     - request.resource.data.userId: 'user456'
     * @allow (get) User can retrieve their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (get) User cannot retrieve another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (update) User can update their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (update) User cannot update another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (delete) User can delete their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (delete) User cannot delete another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with ID 'user123' can add a song to their playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (create) User with ID 'user123' cannot add a song to another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (get) User can retrieve a song from their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (get) User cannot retrieve a song from another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (update) User can update a song in their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (update) User cannot update a song in another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @allow (delete) User can delete a song from their own playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user123'
     * @deny (delete) User cannot delete a song from another user's playlist.
     *     - auth.uid: 'user123'
     *     - userId: 'user456'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global songs collection. Anyone can read songs, but only the owner can create, update, or delete.
     * @path /songs/{songId}
     * @allow (get) Anyone can retrieve a song.
     * @allow (list) Anyone can list songs.
     * @allow (create) Only the owner can create a song (TODO: add ownerId to schema).
     * @allow (update) Only the owner can update a song (TODO: add ownerId to schema).
     * @allow (delete) Only the owner can delete a song (TODO: add ownerId to schema).
     * @principle Allows public read access, but restricts write access to the owner.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get) Any signed-in user can retrieve a message.
     * @allow (list) Any signed-in user can list messages.
     * @allow (update) No one can update a message.
     * @allow (delete) No one can delete a message.
     */
    match /songs/{songId}/messages/{messageId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) Not allowed.
     * @allow (get) The user can retrieve their own followers.
     * @allow (list) The user can list their own followers.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/followers/{followerId} {
      allow create: if false;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) Not allowed.
     * @allow (get) The user can retrieve the users they are following.
     * @allow (list) The user can list the users they are following.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/following/{followingId} {
      allow create: if false;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }
}