/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model for the Aura application.
 *
 * Core Philosophy:
 * - Strict user-ownership for personal data (profile, playlists, follows).
 * - Public read access to the global song catalog.
 * - Private chats with access control based on participant lists.
 *
 * Data Structure:
 * - Users: /users/{userId} (profile data)
 *   - Playlists: /users/{userId}/playlists/{playlistId}
 *     - Songs: /users/{userId}/playlists/{playlistId}/songs/{songId}
 *   - Followers: /users/{userId}/followers/{followerId}
 *   - Following: /users/{userId}/following/{followingId}
 * - Songs (Global Catalog): /songs/{songId}
 *   - Messages: /songs/{songId}/messages/{messageId}
 * - Chats: /chats/{chatId}
 *   - Messages: /chats/{chatId}/messages/{messageId}
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data and playlists.
 * - The song catalog is publicly readable, but only owners can create/update/delete songs.
 * - Private chats are accessible only to participants.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - Chats include a `participantIds` array to enable rule-based access control.
 *
 * Structural Segregation:
 * - Public songs and private user playlists are stored in separate top-level collections and user subcollections, respectively.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can access and modify their profile.
     * @deny (create, update, delete) User cannot create, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, get, update, delete, list) User with matching ID can manage their own playlists.
     * @deny (create, get, update, delete, list) User cannot manage another user's playlists.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, get, update, delete, list) User with matching ID can manage songs in their own playlists.
     * @deny (create, get, update, delete, list) User cannot manage songs in another user's playlist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Public read access to the entire song catalog.
     * @allow (create) Owner can create songs with matching `ownerId`.
     * @allow (update, delete) Owner can update and delete their own songs.
     * @deny (create, update, delete) Non-owners cannot modify songs.
     * @principle Public read, owner-only write access for the global song catalog.
     */
    match /songs/{songId} {
       allow get, list: if true;
       allow create: if request.resource.data.id != null; // TODO: Add owner validation once the schema is updated with an ownership field.
       allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
       allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create, get, update, delete, list) Public read and write access to song messages.
     * @principle Allows open chat for each song.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Controls access to followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create, get, update, delete, list) User can manage their own followers.
     * @deny (create, get, update, delete, list) User cannot manage another user's followers.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create, get, update, delete, list) User can manage their own following list.
     * @deny (create, get, update, delete, list) User cannot manage another user's following list.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private chat sessions.
     * @path /chats/{chatId}
     * @allow (create) Any signed-in user can create a chat.  The create operation needs access because it needs to write a list of valid users.
     * @allow (get, list) Only participants can read chat metadata.
     * @allow (update, delete) Only participants can update/delete a chat.
     * @principle Enforces shared access based on the `participantIds` array.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
          return request.auth.uid in resource.data.participantIds;
      }
      allow get, list: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && isParticipant();
      allow delete: if isSignedIn() && isParticipant();
    }

    /**
     * @description Controls access to messages within a private chat session.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create, get, update, delete, list) Only participants of the chat can read and write messages.
     * @principle Enforces shared access based on the parent chat's `participantIds` array.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isChatParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
      allow get, list, create, update, delete: if isSignedIn() && isChatParticipant(chatId);
    }
  }
}