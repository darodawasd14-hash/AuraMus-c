/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with a focus on ownership and shared access.
 * Users have full control over their own data, while access to shared resources is governed by explicit membership.
 * Data shapes are not strictly enforced during this prototyping phase, prioritizing rapid iteration and flexible schema design.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a playlist.
 * - /songs/{songId}: Global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song.
 * - /users/{userId}/followers/{followerId}:  Followers of a user
 * - /users/{userId}/following/{followingId}: Users followed by a user
 * - /chats/{chatId}: Private chat rooms between users, chatId is a combination of user IDs.
 * - /chats/{chatId}/messages/{messageId}: Messages within a chat room.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents and related playlists/songs.
 * - Public read access is granted to the global song catalog (/songs/{songId}).
 * - Private chat messages (/chats/{chatId}/messages/{messageId}) are accessible only to chat participants.
 * - User listing is disabled for privacy.
 *
 * Denormalization for Authorization:
 * - Chat documents (/chats/{chatId}) MUST contain an array of `participantIds` to efficiently authorize access to chat messages.
 *   This avoids costly `get()` calls to a separate membership collection.
 *
 * Structural Segregation:
 * - User-owned data (playlists, songs, followers, following) is stored under the /users/{userId} path, ensuring private access.
 * - The global song catalog (/songs/{songId}) is stored at the top level, enabling public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their playlists.
     * @path /users/{userId}/playlists/{playlistId}
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage songs within their playlists.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to the global song catalog, with owner-only writes.
     * @path /songs/{songId}
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add author validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows users to send and receive chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows users to manage their followers.
     * @path /users/{userId}/followers/{followerId}
     */
    match /users/{userId}/followers/{followerId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && request.auth.uid == followerId;
        allow update: if false;
        allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows users to manage who they are following.
     * @path /users/{userId}/following/{followingId}
     */
    match /users/{userId}/following/{followingId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if false;
        allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Manages private chat rooms between users.
     * @path /chats/{chatId}
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Allows only chat participants to read and write messages in a specific chat room.
     * @path /chats/{chatId}/messages/{messageId}
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isChatParticipant(chatId);
      allow list: if isChatParticipant(chatId);
      allow create: if isChatParticipant(chatId);
      allow update: if isChatParticipant(chatId);
      allow delete: if isChatParticipant(chatId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data.userId == userId;
  }

  function isChatParticipant(chatId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
  }
}