/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to certain shared resources.
 * All write operations are restricted to authenticated users, and data access is controlled based on user identity and explicit ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs in a specific playlist, accessible only to the owning user.
 * - /songs/{songId}: Stores a global catalog of songs, publicly readable but writable only with a valid user ID.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song, writable by authenticated users.
 * - /users/{userId}/followers/{followerId}: Stores the followers of the user.
 * - /users/{userId}/following/{followingId}: Stores the users that the user is following.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and playlists.
 * - Public read access is granted to the /songs collection, enabling a shared song catalog.
 * - Users must be authenticated to create chat messages for songs.
 * - Listing of users is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 * - The `Playlist` entity includes a `userId` field to enforce ownership and avoid costly `get()` calls.
 * - The `Song` entity in the `/songs` collection requires an `ownerId` or `authorId` field (to be implemented) for secure write access.
 *
 * Structural Segregation:
 * - Private user data (profiles, playlists) is stored under the /users/{userId} path, while public song data is stored in the top-level /songs collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against non-existent documents during update/delete operations.
     * @param {string} userId - The user ID to check against the resource.
     * @returns {bool} - True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {bool} - True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {bool} - True if the user IDs match.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own profile.
     * @deny (create) - User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update or delete user 'user123's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User with ID 'user123' can create a playlist under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own playlist.
     * @deny (create) - User with ID 'user456' cannot create a playlist for user 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update or delete user 'user123's playlist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - User with ID 'user123' can create a song in their playlist.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete songs in their own playlist.
     * @deny (create) - User with ID 'user456' cannot create a song in user 'user123's playlist.
     * @deny (update, delete) - User with ID 'user456' cannot update or delete songs in user 'user123's playlist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Anyone can read the song catalog.
     * @allow (create) - Only authenticated users can add songs to the catalog, must include ownerId.
     * @allow (update, delete) - Only the owner of the song can update or delete it.
     * @deny (create) - Unauthenticated users cannot add songs.
     * @deny (update, delete) - Users who are not the owner cannot update or delete songs.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Song' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rules for chat messages associated with a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) - Authenticated users can create messages.
     * @allow (get, list) - Anyone can read the messages for a song.
     * @deny (create) - Unauthenticated users cannot create messages.
     * @principle Requires authentication for writing messages while allowing public read access.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
     /**
      * @description Rules for the list of followers for a user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (get, list) - Only the user can see their followers.
      * @allow (create, delete) - Only the user can add/remove followers.
      * @deny (get, list) - Other users cannot see who is following the user.
      * @principle Restricts access to follower information to the user.
      */
      match /users/{userId}/followers/{followerId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isOwner(userId);
      }

      /**
       * @description Rules for the list of users a user is following.
       * @path /users/{userId}/following/{followingId}
       * @allow (get, list) - Only the user can see who they are following.
       * @allow (create, delete) - Only the user can add/remove who they are following.
       * @deny (get, list) - Other users cannot see who the user is following.
       * @principle Restricts access to following information to the user.
       */
      match /users/{userId}/following/{followingId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isOwner(userId);
      }
  }
}