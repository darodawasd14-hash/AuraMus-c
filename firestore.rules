/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated songs. Users can only read and write their own data.
 *
 * Data Structure:
 * - User profiles are stored in `/artifacts/Aura/users/{userId}`.
 * - Each user's songs are stored in a subcollection `/artifacts/Aura/users/{userId}/songs/{songId}`.
 *
 * Key Security Decisions:
 * - Users can only create their profile if the `userId` matches their `auth.uid`.
 * - Users can only manage (create, update, delete) songs within their own profile.
 * - Data validation is minimal to facilitate rapid prototyping and iteration. Only authorization-related data is validated.
 * - Listing of user documents is disallowed, but users can list songs within their own profile.
 *
 * Denormalization for Authorization:
 * No explicit denormalization is used in this version. The rules rely on path-based authorization for simplicity.
 *
 * Structural Segregation:
 * The application uses separate collections for user profiles and their songs, ensuring data privacy and efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile documents.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) - Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (list) - Listing user profiles is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /artifacts/Aura/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects song documents within a user's profile.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) - Authenticated user can create a song within their own profile.
     * @allow (get) - Authenticated user can read a song within their own profile.
     * @allow (update) - Authenticated user can update a song within their own profile.
     * @allow (delete) - Authenticated user can delete a song within their own profile.
     * @allow (list) - Authenticated user can list songs within their own profile.
     * @deny (create) - If a user tries to create a song in another user's profile.
     * @deny (update) - If a user tries to update a song in another user's profile.
     * @deny (delete) - If a user tries to delete a song in another user's profile.
     * @principle Enforces document ownership for songs.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}