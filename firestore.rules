/**
 * @fileoverview Firestore Security Rules for Aura Music App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and songs.
 * Chat messages and live listener data are publicly readable, but only authenticated users can contribute.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: User profile data, owned by the user.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Songs owned by the user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Public chat messages for a song.
 * - /artifacts/Aura/songs/{songId}/live_listeners/{userId}: Tracks live listeners for a song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and songs.
 * - Public read access is granted for chat messages and live listeners to encourage community engagement.
 * - Only authenticated users can create chat messages and live listener entries.
 * - Listing user documents is disallowed for privacy reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the document's ownerId and ensures the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) User with UID 'user123' can create a song if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their songs if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their songs if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their songs if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a song for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for chat messages for a song.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get) Any user can read chat messages for a song.
     * @allow (list) Any user can list chat messages for a song.
     * @allow (create) Authenticated users can create chat messages.
     * @deny (create) Anonymous users cannot create chat messages.
     * @principle Allows public read access for chat messages but restricts writes to authenticated users.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for live listeners for a song.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (get) Any user can read live listener data for a song.
     * @allow (list) Any user can list live listener data for a song.
     * @allow (create) Authenticated users can create live listener entries.
     * @deny (create) Anonymous users cannot create live listener entries.
     * @principle Allows public read access for live listener data but restricts writes to authenticated users.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}