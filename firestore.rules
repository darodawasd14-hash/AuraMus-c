/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-centric security model where users own their data and can read public data.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a specific playlist.
 * - /songs/{songId}: A global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages associated with a song.
 * - /users/{userId}/followers/{followerId}: Users following a particular user.
 * - /users/{userId}/following/{followingId}: Users a particular user is following.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage their own playlists and the songs within them.
 * - The global /songs collection is publicly readable, but write access is restricted to authenticated users who set the correct authorId.
 * - Listing of followers and followings is allowed for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, update) if the requesting user's ID matches the userId in the path.
     * @deny (create, delete) Always deny create and delete operations.
     * @principle Enforces document ownership for reads and updates.
     */
    match /users/{userId} {
      allow read, update: if isSignedIn() && isOwner(userId);
      allow create, delete: if false;
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read, write, delete) if the requesting user's ID matches the userId in the path.
     * @deny None.
     * @principle Enforces document ownership for playlist management.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow read, write, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read, write, delete) if the requesting user's ID matches the userId in the path.
     * @deny None.
     * @principle Enforces document ownership for managing songs in a playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow read, write, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the global songs collection.
     * @path /songs/{songId}
     * @allow (get, list) Allow public read access to all songs.
     * @allow (create) Allow users to create songs, but only if the 'authorId' field matches their own UID.
     * @allow (update, delete) Allow users to update/delete songs if they are the author.
     * @deny None.
     * @principle Allows public read access with owner-only writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['title', 'url', 'type', 'timestamp']) && request.resource.data.keys().toSet().size() == 4;
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read, write) Allow any authenticated user to read and write messages.
     * @deny None.
     */
    match /songs/{songId}/messages/{messageId} {
      allow read, write: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of users following a specific user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (read, list, create) Allow the owner to list their followers and create new follow relationships.
     * @allow delete: if isSignedIn() && isOwner(userId);
     * @deny None.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/followers/{followerId} {
      allow read, list, create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the list of users a specific user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (read, list, create) Allow the owner to list their followings and create new follow relationships.
     * @allow delete: if isSignedIn() && isOwner(userId);
     * @deny None.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/following/{followingId} {
      allow read, list, create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}