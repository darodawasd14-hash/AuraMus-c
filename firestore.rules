rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read) Signed-in user can read any user's profile.
     * @allow (create, update, delete) Signed-in user can only modify their own profile.
     * @deny (create, update, delete) Signed-in user cannot modify other user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read) Signed-in user can read their own playlists.
     * @allow (create, update, delete) Signed-in user can only modify their own playlists.
     * @deny (create, update, delete) Signed-in user cannot modify other user's playlists.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.resource.data.userId == userId && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
    }

    /**
     * @description Controls access to songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read) Signed-in user can read their own playlist's songs.
     * @allow (create, update, delete) Signed-in user can only modify songs in their own playlists.
     * @deny (create, update, delete) Signed-in user cannot modify songs in other user's playlists.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (read) Any user can read song details.
     * @deny (create, update, delete) Only an admin could manage the song catalog.
     * @principle Allows public read access.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check if needed.
    }

    /**
     * @description Controls access to chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read) Any signed-in user can read song messages.
     * @allow (create) Any signed-in user can create song messages.
     *
     * @deny (update, delete) Updating and deleting messages are restricted.
     * @principle Allows public read access with write access restricted to signed-in users.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (read, list) Only the owner can list their followers.
     * @allow (create) Any signed-in user can create a follow relationship.
     * @deny (update, delete) Updating and deleting follow relationships are restricted.
     * @principle Enforces document ownership for listing.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

     /**
      * @description Controls access to users followed by a user.
      * @path /users/{userId}/following/{followingId}
      * @allow (read, list) Only the owner can list who they are following.
      * @allow (create) Any signed-in user can create a follow relationship.
      * @deny (update, delete) Updating and deleting follow relationships are restricted.
      * @principle Enforces document ownership for listing.
      */
    match /users/{userId}/following/{followingId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (read, write) Only participants of the chat can read and write.
     * @principle Enforces shared access (closed collaborators).
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow list: if false; // Listing all chats is not permitted.
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAll([request.auth.uid]);
      allow update: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow delete: if isSignedIn() && isParticipant(resource.data.participantIds);
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, create) Only participants of the chat can read and create messages.
     * @deny (update, delete) Updating and deleting messages are restricted.
     * @principle Enforces shared access (closed collaborators).
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isChatParticipant(chatId);
      allow list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isParticipant(participantIds) {
    return participantIds.hasAny([request.auth.uid]);
  }

  function isChatParticipant(chatId) {
    return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]) && isSignedIn();
  }
}