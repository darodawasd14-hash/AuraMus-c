/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and secure access to user-generated content.
 * Users have full control over their profile data and playlists.
 * Public read access is granted to certain collections (e.g., /songs) to enable discovery.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}: User-created playlists, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist, accessible only by the owning user.
 * - /songs/{songId}: A global catalog of songs, publicly readable but writable only by an authorized service (not implemented in this ruleset).
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song, accessible to all authenticated users.
 * - /users/{userId}/followers/{followerId}: List of users following a specific user, readable by all authenticated users.
 * - /users/{userId}/following/{followingId}: List of users that a specific user is following, readable by all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The /songs collection is publicly readable to allow for song discovery. Writes to /songs are not secured in this prototype.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - User IDs are used in path structures to simply authorization checks (e.g., `isOwner(userId)`).
 *
 * Structural Segregation:
 *  - Private user data is stored under /users/{userId}, while public song data is stored in the top-level /songs collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User JLvgYw... creates their profile.
     * @allow (get) User JLvgYw... reads their profile.
     * @allow (update) User JLvgYw... updates their profile.
     * @allow (delete) User JLvgYw... deletes their profile.
     * @deny (create) User ABC creates a profile with ID different from their own.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User JLvgYw... creates a playlist under their profile.
     * @allow (get) User JLvgYw... reads a playlist under their profile.
     * @allow (update) User JLvgYw... updates a playlist under their profile.
     * @allow (delete) User JLvgYw... deletes a playlist under their profile.
     * @deny (create) User ABC creates a playlist under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User JLvgYw... creates a song in their playlist.
     * @allow (get) User JLvgYw... reads a song from their playlist.
     * @allow (update) User JLvgYw... updates a song in their playlist.
     * @allow (delete) User JLvgYw... deletes a song from their playlist.
     * @deny (create) User ABC creates a song in another user's playlist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the global songs collection.
     * @path /songs/{songId}
     * @allow (get) Any signed-in user can read any song.
     * @allow (list) Any signed-in user can list songs.
     * @deny (create) No user can create a song directly (requires admin).
     * @deny (update) No user can update a song directly (requires admin).
     * @deny (delete) No user can delete a song directly (requires admin).
     * @principle Public read access with restricted write access.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Secure writes once the authorized service is defined.
      allow update: if false; // TODO: Secure writes once the authorized service is defined.
      allow delete: if false; // TODO: Secure writes once the authorized service is defined.
    }

    /**
     * @description Rules for chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get) Any signed-in user can read a message.
     * @allow (list) Any signed-in user can list messages.
     * @deny (update) No user can update a message.
     * @deny (delete) No user can delete a message.
     * @principle Authenticated users can create and read messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get) Any signed-in user can read the followers of a user.
     * @allow (list) Any signed-in user can list the followers of a user.
     * @allow (create) Any signed-in user can create a follower for a user.
     * @deny (update) No user can update a follower.
     * @deny (delete) No user can delete a follower.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for users that a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get) Any signed-in user can read the users that a user is following.
     * @allow (list) Any signed-in user can list the users that a user is following.
     * @allow (create) Any signed-in user can create a following for a user.
     * @deny (update) No user can update a following.
     * @deny (delete) No user can delete a following.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}