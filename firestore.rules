/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and songs,
 * and allows public read access to live listener data.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: User profiles, owned by the user.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Songs specific to each user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Chat messages for a specific song; publicly accessible.
 * - /artifacts/Aura/songs/{songId}/live_listeners/{userId}: Tracks users currently listening to a specific song; publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and songs.
 * - Listing of users is disallowed.
 * - Live listener and message data is publicly readable.
 * - The 'id' field inside User documents must match the document id {userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if their UID matches {userId}.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile if their UID matches {userId}.
     * @deny (create) - User with UID 'user456' cannot create a profile with {userId} as 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile of user with {userId} as 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /artifacts/Aura/users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) - User with UID 'user123' can create a song under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their own songs.
     * @deny (create) - User with UID 'user456' cannot create a song under user 'user123's profile.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update, or delete songs under user 'user123's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read chat messages for a specific song, but restricts modifications.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) - Any user can read messages.
     * @deny (create, update, delete) - No user can create, update, or delete messages through the rules.
     * @principle Provides public read access to chat messages.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the list of live listeners for a song, but restricts modifications.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (get, list) - Any user can read the list of live listeners.
     * @deny (create, update, delete) - No user can create, update, or delete entries in the live_listeners collection through the rules.
     * @principle Provides public read access to live listener data.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}