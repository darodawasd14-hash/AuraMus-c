/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and shared-access patterns. Users have full control over their own data (profile, playlists, songs).
 * Public read access is granted to song catalogs, while writes are restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible to authenticated users.
 * - /users/{userId}/playlists/{playlistId}: User-created playlists, owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist.
 * - /songs/{songId}: A global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song, accessible to all users.
 * - /users/{userId}/followers/{followerId}: Users following a specific user.
 * - /users/{userId}/following/{followingId}: Users that a specific user is following.
 * - /chats/{chatId}: Private chat rooms between users, secured via participant list.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can create, update, and delete their own playlists and songs within those playlists.
 * - The global song catalog is publicly readable, but only authenticated users can add songs.
 * - Chat messages for songs are publicly accessible.
 * - Private chats are secured by checking if the user is a participant in the chat.
 * - Data types and nullability are not strictly enforced in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The `Playlist` entity includes a `userId` field to simplify ownership checks in the `/users/{userId}/playlists/{playlistId}` path.
 * - The `Chat` entity includes a `participantIds` array to enable efficient authorization for chat access.
 *
 * Structural Segregation:
 * - User-specific playlists and songs are stored under the `/users/{userId}` path, ensuring private user data is separate from the public song catalog under `/songs`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read) Authenticated user can read any user profile.
     * @allow (create, update, delete) Authenticated user can only modify their own profile.
     * @deny (create) Non-authenticated user cannot create a profile.
     * @deny (update, delete) Authenticated user cannot modify another user's profile.
     * @principle Enforces document ownership for writes. Allows public read access to profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update, delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) Authenticated user can create a playlist under their own profile.
     * @allow (get, list) Authenticated user can list their own playlists.
     * @allow (update, delete) Authenticated user can modify or delete their own playlists.
     * @deny (create, update, delete) Authenticated user cannot modify another user's playlists.
     * @principle Enforces document ownership for writes. Restricts playlist access to the owning user.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) Authenticated user can add songs to their own playlist.
     * @allow (get, list) Authenticated user can list songs in their own playlist.
     * @allow (update, delete) Authenticated user can modify or delete songs in their own playlist.
     * @deny (create, update, delete) Authenticated user cannot modify another user's playlists.
     * @principle Enforces document ownership for writes. Restricts song access to the owning user.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read the song catalog.
     * @allow (create) Authenticated user can add a song to the catalog.
     * @deny (update, delete) No user can update or delete a song in the catalog.
     * @principle Allows public read access to songs, restricts writes to authenticated users.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Any user can read chat messages for a song.
     * @allow (create) Authenticated user can create a chat message.
     * @deny (update, delete) No user can update or delete a chat message.
     * @principle Allows public read access to chat messages, restricts writes to authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
    
    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) Any authenticated user can view the followers of another user.
     * @allow (create) Authenticated user can follow another user.
     * @deny (update, delete) A user cannot modify the follower list directly.
     * @principle Followers are public, but managed through create/delete operations.
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) Any authenticated user can view who another user is following.
     * @allow (create) Authenticated user can add to their following list.
     * @deny (update, delete) A user cannot directly modify their following list (use delete to unfollow).
     * @principle Following lists are public, managed through create/delete operations.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId) && request.auth.uid == request.resource.data.uid;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can read or list chat rooms.
     * @allow (create) Only authenticated users can create chat rooms. The chat MUST contain participantIds array that includes the user's ID.
     * @allow (update, delete) No user can update or delete a chat room.
     * @principle Enforces shared access via participant list.
     */
    match /chats/{chatId} {
      allow get, list: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Only participants of the chat can read messages.
     * @allow (create) Only participants of the chat can send messages.
     * @deny (update, delete) No user can update or delete a chat message.
     * @principle Enforces shared access via participant list inherited from the chat room.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}