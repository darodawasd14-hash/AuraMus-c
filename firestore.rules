/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated playlists and songs.
 * Public read access is granted to the global song catalog, but modifications are restricted to authenticated users.
 * Chat messages are publicly readable, but write access is restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by each user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within each playlist.
 * - /songs/{songId}: Stores a global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for each song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and playlists.
 * - The global song catalog is publicly readable but only authenticated users can create new songs.
 * - Users can only create playlists and add songs to playlists under their own user ID.
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 * - Playlist documents contain a `userId` field to easily verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User with ID 'user123' can create a playlist under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own playlists.
     * @deny (create) - User with ID 'user456' cannot create a playlist under user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete playlists under user 'user123'.
     * @principle Enforces ownership for playlists within a user's profile.
     */
    match /users/{userId}/playlists/{playlistId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isOwner(userId) && resource != null && resource.data.userId == userId;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - User with ID 'user123' can add songs to their playlist.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete songs in their own playlist.
     * @deny (create) - User with ID 'user456' cannot add songs to user 'user123's playlist.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete songs in user 'user123's playlist.
     * @principle Enforces ownership for songs within a user's playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the song catalog.
     * @allow (create) - Any authenticated user can add songs to the catalog.
     * @deny (update, delete) - Only the song owner should be able to update/delete.  However, the schema does not specify an owner.
     * @principle Allows public read access to the song catalog but requires authentication for modifications.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Any user can read the chat messages for a song.
     * @allow (create) - Any authenticated user can add messages to the chat.
     * @deny (update, delete) - No user can update or delete messages.
     * @principle Allows public read access to chat messages but restricts write access to authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }
  }
}