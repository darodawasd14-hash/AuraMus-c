/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a balance between allowing broad read access for social features
 * and enforcing strict user-ownership for data modification operations.
 *
 * Data Structure:
 * - Users: `/users/{userId}` stores public profile information.
 * - Playlists: `/users/{userId}/playlists/{playlistId}` stores playlists owned by a user.
 * - Songs (User): `/users/{userId}/playlists/{playlistId}/songs/{songId}` stores songs within a playlist.
 * - Songs (Global): `/songs/{songId}` stores all songs, creating a global catalog.
 * - Messages: `/songs/{songId}/messages/{messageId}` stores chat messages for a specific song.
 * - Followers: `/users/{userId}/followers/{followerId}` stores the followers for user.
 * - Following: `/users/{userId}/following/{followingId}` stores the followings for user.
 *
 * Key Security Decisions:
 * - Users can read any user profile.
 * - Only the owner can create, update, or delete their profile.
 * - Only the owner can create, update, or delete playlists and their songs.
 * - Anyone can read the global song catalog.
 * - Anyone can read messages for a song.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, ownership is enforced by matching the `userId` in the path
 * with the `request.auth.uid` or the document's `userId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read) Any signed-in user can read any profile: `request.auth != null`
     * @allow (create) A user can create their own profile: `request.auth.uid == userId`
     * @deny (create) A user cannot create a profile with a mismatched ID: `request.auth.uid != userId`
     * @allow (update) A user can update their own profile: `request.auth.uid == userId && resource != null`
     * @deny (update) A user cannot update someone else's profile: `request.auth.uid != userId`
     * @allow (delete) A user can delete their own profile: `request.auth.uid == userId && resource != null`
     * @deny (delete) A user cannot delete someone else's profile: `request.auth.uid != userId`
     * @principle Enforces user-ownership for profile management and allows public reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read) The owner can read their playlists: `isOwner(userId)`
     * @deny (read) Other users cannot read these playlists: `!isOwner(userId)`
     * @allow (create) The owner can create playlists under their profile: `isOwner(userId)`
     * @deny (create) Other users cannot create playlists under this profile: `!isOwner(userId)`
     * @allow (update) The owner can update their playlists: `isExistingOwner(userId)`
     * @deny (update) Other users cannot update these playlists: `!isOwner(userId)`
     * @allow (delete) The owner can delete their playlists: `isExistingOwner(userId)`
     * @deny (delete) Other users cannot delete these playlists: `!isOwner(userId)`
     * @principle Enforces strict user-ownership for playlist management.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read) The owner can read songs within their playlists: `isOwner(userId)`
     * @deny (read) Other users cannot read songs in this playlist: `!isOwner(userId)`
     * @allow (create) The owner can add songs to their playlists: `isOwner(userId)`
     * @deny (create) Other users cannot add songs to this playlist: `!isOwner(userId)`
     * @allow (update) The owner can update songs within their playlists: `isExistingOwner(userId)`
     * @deny (update) Other users cannot update songs in this playlist: `!isOwner(userId)`
     * @allow (delete) The owner can delete songs from their playlists: `isExistingOwner(userId)`
     * @deny (delete) Other users cannot delete songs from this playlist: `!isOwner(userId)`
     * @principle Enforces strict user-ownership for songs within a playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (read) Anyone can read the song catalog: `true`
     * @allow (create) Anyone can add the song to catalog: `true`
     * @deny (update) Only owner can update song: `false`
     * @deny (delete) Only owner can delete song: `false`
     * @principle Allows public read access to the song catalog, but restricts writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;

      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read) Any signed-in user can read messages: `request.auth != null`
     * @allow (create) Any signed-in user can create messages: `request.auth != null`
     * @deny (update) No one can update messages: `false`
     * @deny (delete) No one can delete messages: `false`
     * @principle Allows public read and create access to chat messages, but restricts modifications.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (read) Any signed-in user can read followers: `request.auth != null`
     * @allow (create) Any signed-in user can create follower: `request.auth != null`
     * @deny (update) No one can update follower: `false`
     * @deny (delete) No one can delete follower: `false`
     */
    match /users/{userId}/followers/{followerId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to user following.
     * @path /users/{userId}/following/{followingId}
     * @allow (read) Any signed-in user can read followings: `request.auth != null`
     * @allow (create) Any signed-in user can create following: `request.auth != null`
     * @deny (update) No one can update following: `false`
     * @deny (delete) No one can delete following: `false`
     */
    match /users/{userId}/following/{followingId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the requesting user is the owner of the existing resource.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}