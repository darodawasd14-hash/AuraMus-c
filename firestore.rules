/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and playlists.
 * Songs are publically readable, but can only be created/updated/deleted by their owner.
 * Messages associated with Songs can be created by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by a specific user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a playlist.
 * - /songs/{songId}: Global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and playlists.
 * - The global song list is publicly readable to allow discovery, but creation and modification are restricted to authenticated users.
 * - Anyone can post a message on a song.
 *
 * Denormalization for Authorization:
 *  - For /users/{userId}, the document ID is the userId. This is enforced in the rules.
 *  - For /users/{userId}/playlists/{playlistId}, the `userId` field within the playlist document is denormalized to match the parent path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (update, delete) User with ID 'user123' tries to update/delete profile for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User 'user123' creates a playlist.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, list, update, delete) User 'user123' reads/lists/updates/deletes their playlists.
     *   - request.auth.uid: 'user123'
     * @deny (create) User 'user123' tries to create a playlist for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (update, delete) User 'user123' tries to update/delete a playlist for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User 'user123' creates a song in their playlist.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User 'user123' reads/lists/updates/deletes songs in their playlist.
     *   - request.auth.uid: 'user123'
     * @deny (create) User 'user123' tries to create a song in another user's playlist.
     *   - request.auth.uid: 'user123'
     * @deny (update, delete) User 'user123' tries to update/delete a song in another user's playlist.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read the song catalog.
     * @allow (create) Authenticated user can create a song.
     * @allow (update, delete) Authenticated user can update/delete a song.
     * @deny (create) Unauthenticated user tries to create a song.
     * @deny (update, delete) Unauthenticated user tries to update/delete a song.
     * @principle Allows public read access to the song catalog with owner-only writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any authenticated user can create a message.
     *   - request.auth.uid: 'user123'
     * @allow (get, list) Any user can read the messages for a song.
     * @deny (update, delete) No one can update or delete a message.
     * @principle Allows any authenticated user to create a message, with public read access.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}