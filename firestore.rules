rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, ensuring only the user can access their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      // Self-creation: allow create if the authenticated user's ID matches the document ID
      allow create: if isSignedIn() && request.auth.uid == userId;

      // On Update: enforces that the userId path parameter and the document's 'id' field are immutable and match.
      allow update: if isOwner(userId);

      // On Delete: only the owner can delete their profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects a user's playlist, ensuring only the user can manage their own songs.
     * @path /users/{userId}/playlist/{songId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations within a user's playlist.
     */
    match /users/{userId}/playlist/{songId} {
      // Helper function to check if the requesting user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow creating a song in the playlist only if the user is the owner.
      allow create: if isOwner(userId);

      // Allow updating a song in the playlist only if the user is the owner and the document exists
      allow update: if isOwner(userId);

      // Allow deleting a song in the playlist only if the user is the owner and the document exists.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to the global song catalog and allows any authenticated user to write
     * @path /songs/{songId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth != null
     * @deny (create, update, delete) if request.auth == null
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /songs/{songId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      // Allow creating a song if the user is signed in.
      allow create: if isSignedIn();

      // Allow updating a song if the user is signed in and the document exists.
      allow update: if isSignedIn();

      // Allow deleting a song if the user is signed in and the document exists.
      allow delete: if isSignedIn();

      /**
       * @description Allows any authenticated user to read and write messages for a specific song.
       * @path /songs/{songId}/messages/{messageId}
       * @allow (read, write) if request.auth != null
       * @deny (read, write) if request.auth == null
       * @principle Allows public read access while restricting write access to authenticated users.
       */
      match /messages/{messageId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    }
  }
}