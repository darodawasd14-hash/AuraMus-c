/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-owned data with public read access to song-related
 * content, while strictly controlling write access to ensure data integrity
 * and prevent unauthorized modifications.
 *
 * Data Structure:
 * - Users: /artifacts/Aura/users/{userId} - Stores user profiles.
 * - User Songs: /artifacts/Aura/users/{userId}/songs/{songId} - Stores songs specific to each user.
 * - Song Messages: /artifacts/Aura/songs/{songId}/messages/{messageId} - Stores chat messages for a specific song.
 * - Live Listeners: /artifacts/Aura/songs/{songId}/live_listeners/{userId} - Tracks users currently listening to a specific song.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Song messages are publicly readable, but write access is authenticated.
 * - Live listener data is publicly readable, and any authenticated user can declare themself a listener.
 *
 * Denormalization for Authorization:
 *  - The `LiveListener` entity duplicates `uid` and `displayName`, which are available in `request.auth`.
 *    This duplication simplifies the rules and eliminates the need to `get()` the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the user to read and write their own profile data.
     * @path /artifacts/Aura/users/{userId}
     * @allow (get, update, delete) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can read and update their own profile.
     * @allow (create) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can create their own profile if the userId matches their auth.uid.
     * @deny (get, update, delete) User 'OtherUser' cannot read or update User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2's profile.
     * @deny (create) User 'OtherUser' cannot create User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2's profile.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can add a song to their library.
     * @allow (get, list, update, delete) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can manage their own songs.
     * @deny (create, get, list, update, delete) User 'OtherUser' cannot manage User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2's songs.
     * @principle Restricts access to a user's own data tree.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read messages for a song, but only authenticated users can post new messages.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) Any user can read messages for a song.
     * @allow (create) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can post a message for a song.
     * @deny (update, delete) No one can update or delete a message.
     * @principle Public read access with authenticated writes.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.sender.uid == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read who is listening to a song, and any authenticated user to add themselves as a listener.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (get, list) Any user can see who is listening to a song.
     * @allow (create) User 'JLvgYwvueSNh9ywBxkJZJi9CkjI2' can add themselves as a listener.
     * @deny (update, delete) No one can update or delete the list of listeners.
     * @principle Public read access, authenticated self-identification.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.uid == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}