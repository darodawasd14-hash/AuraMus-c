/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection while allowing for a global song catalog.
 * Users can only read and write their own profile data. Songs are publicly readable but owner-writeable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /songs/{songId}: Stores song metadata, publicly readable but writable only by the song's owner (userId).
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - The /songs collection leverages public read with owner-only write permissions.
 *
 * Denormalization for Authorization:
 * - Songs documents include the userId to enforce ownership. This avoids costly `get()` calls to other collections for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-only access to their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their profile with a matching userId.
     * @allow (get, update, delete) - Authenticated user can access their profile data if the userId matches.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Allows public reading of songs while restricting modifications to the owner.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the song data.
     * @allow (create) - Authenticated user can create a song if the userId matches their own.
     * @allow (update, delete) - Only the user who created the song can modify or delete it.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @principle Implements public read with owner-only write permissions for songs.
     */
    match /songs/{songId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isExistingOwner(resource.data.userId);
    }
  }
}