/**
 * @fileOverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data, while allowing public read access to some collections and shared access to chats.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data, accessible for read by all signed-in users, and writeable only by the user themselves.
 * - `/users/{userId}/playlists/{playlistId}`: Stores playlists created by a user, accessible and writeable only by that user.
 * - `/users/{userId}/playlists/{playlistId}/songs/{songId}`: Stores songs within a playlist, accessible and writeable only by the playlist owner.
 * - `/songs/{songId}`: Stores all songs in a public catalog, readable by all, and writable only by the song's uploader.
 * - `/songs/{songId}/messages/{messageId}`: Stores chat messages for a song, readable by all, but creation is only allowed for authenticated users.
 * - `/users/{userId}/followers/{followerId}`: Stores follower relationships, writeable only by the followed user.
 * - `/users/{userId}/following/{followingId}`: Stores following relationships, writeable only by the user who is following.
 * - `/chats/{chatId}`: Stores chat metadata, accessible and writeable only by chat participants.
 * - `/chats/{chatId}/messages/{messageId}`: Stores chat messages, accessible and writeable only by chat participants.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.
 * - Public read access is granted for the `/songs` collection.
 * - Ownership is enforced on user-specific subcollections.
 * - Shared access is enforced for chat collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read) If the user is signed in.
     * @allow (create, update, delete) If the user's ID matches the requested userId.
     * @deny (create, update, delete) If the user's ID does not match the requested userId.
     * @principle Enforces user-ownership: Only the user can modify their own profile.
     */
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (get, list) If the user's ID matches the requested userId.
     * @allow (create, update, delete) If the user's ID matches the requested userId.
     * @deny (create, update, delete) If the user's ID does not match the requested userId.
     * @principle Enforces user-ownership: Only the user can manage their own playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get, list) If the user's ID matches the requested userId.
     * @allow (create, update, delete) If the user's ID matches the requested userId.
     * @deny (create, update, delete) If the user's ID does not match the requested userId.
     * @principle Enforces user-ownership: Only the user can manage songs in their playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs in the global catalog.
     * @path /songs/{songId}
     * @allow (get, list) Public read access is allowed for all users.
     * @allow (create) If the request contains uploader information that matches the user's ID.
     * @allow (update, delete) If the user's ID matches the song uploader (authorId).
     * @deny (create, update, delete) If the user is not the owner.
     * @principle Allows public read access to the song catalog, but restricts write access to the song owner.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Anyone signed in can create a song
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Public read access is allowed for all users.
     * @allow (create) If the user is signed in.
     * @deny (create) If the user is not signed in.
     * @deny (update, delete) Always deny updates and deletes.
     * @principle Allows public read access to the song chat, but restricts message creation to authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of users following a specific user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) If the user's ID matches the requested userId.
     * @allow (create, update, delete) If the user's ID matches the requested userId.
     * @deny (create, update, delete) If the user's ID does not match the requested userId.
     * @principle Enforces user-ownership: Only the user can manage their followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the list of users that a specific user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) If the user's ID matches the requested userId.
     * @allow (create, update, delete) If the user's ID matches the requested userId.
     * @deny (create, update, delete) If the user's ID does not match the requested userId.
     * @principle Enforces user-ownership: Only the user can manage their following list.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat sessions between users.
     * @path /chats/{chatId}
     * @allow (get, list) If the user is a participant in the chat.
     * @allow (create, update) If the user is a participant in the chat.
     * @allow (delete) If the user is a participant in the chat and has appropriate permissions (e.g., is an admin).
     * @deny (create, update, delete) If the user is not a participant.
     * @principle Enforces shared access: Only chat participants can read and write to the chat.
     */
    match /chats/{chatId} {
       allow get, list: if request.auth.uid in resource.data.participantIds;
       allow create: if request.resource.data.participantIds.hasAny([request.auth.uid]);
       allow update: if request.auth.uid in resource.data.participantIds;
       allow delete: if false; // Deletion is disallowed for chats.
    }

    /**
     * @description Controls access to messages within a chat session.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) If the user is a participant in the chat.
     * @allow (create) If the user is a participant in the chat.
     * @deny (update, delete) Always deny updates and deletes.
     * @principle Enforces shared access: Only chat participants can read and write messages within the chat.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}