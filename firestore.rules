/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and playlists,
 * with public read access to the global songs collection but owner-only access to manage songs.
 * Chat messages are secured to allow only authenticated users to read and write messages
 * related to specific songs.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/playlist/{songId}: Songs in a user's playlist.
 * - /songs/{songId}: Global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and playlist.
 * - The global /songs collection is publicly readable, but only the owner can modify a song.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Song` entity requires a `userId` field to determine ownership for modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) - User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to a user's personal playlist.
     * @path /users/{userId}/playlist/{songId}
     * @allow (create, get, update, delete) - Authenticated user can manage their own playlist.
     * @deny (get, update, delete) - User cannot access another user's playlist.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlist/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the global songs catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the songs.
     * @allow (create) - Authenticated user can add songs. Must have request.resource.data.userId == request.auth.uid
     * @allow (update, delete) - Only the owner can modify/delete a song.
     * @deny (create) - Unauthorized user can not create song.
     * @principle Public read access with owner-only writes for the songs catalog.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
          return request.auth.uid == ownerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create, get, list) - Authenticated users can read messages and create new messages.
     * @allow (update, delete) - No updates or deletes of messages.
     * @deny (create) - Unauthenticated user can not create a message.
     * @principle Authenticated users can create and read messages.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}