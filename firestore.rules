/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and access control. Users can only
 * read and write their own data, with the exception of public songs and chats.
 * Unauthenticated users can read public content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists owned by a user, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs in a playlist, accessible only by the playlist owner.
 * - /songs/{songId}: Stores a global catalog of songs, publicly readable but owner-writable.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song, accessible to all.
 * - /users/{userId}/followers/{followerId}: Stores followers of a user, accessible only by the owning user.
 * - /users/{userId}/following/{followingId}: Stores users followed by a user, accessible only by the owning user.
 * - /chats/{chatId}: Stores private chat sessions between users, accessible only by participants.
 * - /chats/{chatId}/messages/{messageId}: Stores messages for a specific chat room, accessible only by chat participants.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - Public songs are readable by anyone, but only the owner can modify them.
 * - Chats are private and only accessible to participants.
 *
 * Denormalization for Authorization:
 * - For chats, the `participantIds` array is used to efficiently check user access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) Unauthenticated user can not create a profile.
     * @deny (get, update, delete) Authenticated user cannot access other user profiles.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) Authenticated user can create playlists under their profile.
     * @allow (get, update, delete) Authenticated user can access and modify their own playlists.
     * @deny (create) Unauthenticated user can not create playlists.
     * @deny (get, update, delete) Authenticated user cannot access or modify playlists of other users.
     * @principle Enforces user ownership for playlist data.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) Authenticated user can add songs to their playlists.
     * @allow (get, update, delete) Authenticated user can access and modify songs in their own playlists.
     * @deny (create) Unauthenticated user can not add songs to playlists.
     * @deny (get, update, delete) Authenticated user cannot access or modify songs in playlists of other users.
     * @principle Enforces user ownership for playlist song data.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read song information.
     * @allow (create, update, delete) Only the song owner can modify song information.
     * @deny (create, update, delete) If the song does not have owner id, deny writes.
     * @principle Allows public read access with owner-only writes for songs.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isSignedIn() && isOwner(ownerId) && resource.data != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create) Any authenticated user can read and create messages.
     * @deny (update, delete) Only the message owner can modify or delete messages.
     * @principle Allows public read and create access, with restricted write access for song messages.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) Authenticated user can follow another user.
     * @allow (get, list) Authenticated user can view their followers.
     * @deny (update, delete) Following relationships can not be updated or deleted directly.
     * @deny (create) Unauthenticated user cannot follow another user.
     * @deny (get, list) Authenticated user cannot view followers of other users.
     * @principle Enforces user ownership for follower data.
     */
    match /users/{userId}/followers/{followerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid != userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to users followed by a user.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) Authenticated user can follow another user.
     * @allow (get, list) Authenticated user can view who they are following.
     * @deny (update, delete) Following relationships can not be updated or deleted directly.
     * @deny (create) Unauthenticated user cannot follow another user.
     * @deny (get, list) Authenticated user cannot view who other users are following.
     * @principle Enforces user ownership for following data.
     */
    match /users/{userId}/following/{followingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid != userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to private chat sessions between users.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can access the chat.
     * @allow (create) Only authenticated users can create a chat. Participants must be specified in the request.
     * @allow (update, delete) Only participants can update/delete a chat.
     * @deny (get, list) Non-participants cannot access the chat.
     * @principle Enforces shared access based on the participant list.
     */
    match /chats/{chatId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant() {
          return request.resource.data.participantIds.hasAny([request.auth.uid]);
        }

        function isExistingParticipant() {
            return isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]) && resource.data != null;
        }

        allow get: if isSignedIn() && isExistingParticipant();
        allow list: if isSignedIn() && isExistingParticipant();
        allow create: if isSignedIn() && request.resource.data.keys().hasAll(['participantIds']) && request.resource.data.participantIds.size() > 0 && request.resource.data.participantIds.hasAny([request.auth.uid]);
        allow update: if isSignedIn() && isExistingParticipant();
        allow delete: if isSignedIn() && isExistingParticipant();
    }

    /**
     * @description Controls access to messages within a specific private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list, create) Only participants of the chat can access and create messages.
     * @deny (update, delete) Messages cannot be updated or deleted.
     * @principle Enforces shared access to chat messages based on the chat participant list.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isChatParticipant(chatId) {
        return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn() && isChatParticipant(chatId);
      allow list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update: if false;
      allow delete: if false;
    }
  }
}