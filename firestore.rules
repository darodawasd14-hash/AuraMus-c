/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles, playlists, and social graph data.
 *  Chat messages are secured based on a split Chat ID. All writes are validated against the authenticated user's identity.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile data; owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Stores user playlists; owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs for a specific playlist; owned by the user.
 * - /songs/{songId}: Stores a global catalog of songs that any user can add to.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages related to a specific song.
 * - /users/{userId}/followers/{followerId}: Stores the followers of a user; owned by the user.
 * - /users/{userId}/following/{followingId}: Stores the users a user is following; owned by the user.
 * - /chats/{chatId}: Represents a chat session between users; chatId is a concatenation of user IDs.
 * - /chats/{chatId}/messages/{messageId}: Stores the messages for a chat session.
 *
 * @keySecurityDecisions
 * - Users can only read/write their own profile data and playlists.
 * - Listing of user profiles is disallowed.
 * - Public read access is granted to the /songs collection.
 * - Chat messages are secured based on the Chat ID, which contains the user IDs of the participants.
 * @denormalizationForAuthorization
 * - None. Rules make direct authorization decisions based on request.auth and resource data.
 * @structuralSegregation
 * - Public songs are stored in a top-level collection, while user-specific data is stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create, get, update, delete) Any other user cannot access this profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) Authenticated user can create playlists under their profile.
     * @allow (get, update, delete) Authenticated user can access their own playlists.
     * @deny (create, get, update, delete) Any other user cannot access this playlist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Controls access to songs within a user's playlist.
      * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
      * @allow (create) Authenticated user can create songs in their own playlist.
      * @allow (get, update, delete) Authenticated user can access songs in their playlist.
      * @deny (create, get, update, delete) Any other user cannot access songs in this playlist.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global songs collection.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read the song data.
     * @allow (create, update, delete) Only the song owner can modify it.
     * @principle Allows public read access with owner-only writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create) Any user can read and create messages for a song.
     * @allow (update, delete) No one can update or delete messages.
     * @principle Allows public read and create access, but no updates or deletes.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the followers list of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list, create, update, delete) Only the owner can manage their followers.
     * @deny (get, list, create, update, delete) Other users cannot access this data.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the following list of a user.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list, create, update, delete) Only the owner can manage who they are following.
     * @deny (get, list, create, update, delete) Other users cannot access this data.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (read, write) Access is granted if the user's UID is part of the chatId.
     * @deny (read, write) Access is denied if the user's UID is not part of the chatId.
     * @principle Enforces access based on the user's presence in the chatId.
     */
    match /chats/{chatId} {
      allow get, list: if request.auth.uid in chatId.split('_');
      allow create: if request.auth.uid in chatId.split('_');
      allow update: if request.auth.uid in chatId.split('_');
      allow delete: if request.auth.uid in chatId.split('_');
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) Access is granted if the user's UID is part of the chatId.
     * @deny (read, write) Access is denied if the user's UID is not part of the chatId.
     * @principle Enforces access based on the user's presence in the chatId.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if request.auth.uid in chatId.split('_');
      allow create: if request.auth.uid in chatId.split('_');
      allow update: if false;
      allow delete: if false;
    }
  }
}