/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. User data and playlists are
 * strictly owned and controlled by individual users. Songs in the global
 * catalog are publicly readable but writable only with validated ownership.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs in a specific playlist, owned by the user.
 * - /songs/{songId}: A global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song, publicly readable.
 * - /users/{userId}/followers/{followerId}: Followers of a user, owned by the user.
 * - /users/{userId}/following/{followingId}: Users followed by a user, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents and associated subcollections.
 * - Listing of user documents is disallowed for privacy.
 * - The global /songs collection is publicly readable, but writes require a valid user ID in the document.
 * - Follower/Following relationships are only writable by the user.
 *
 * Denormalization for Authorization:
 * - The /songs/{songId} documents require a `videoId` property, which must match the document ID to maintain path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the provided `videoId` matches the `songId` in the path.
     */
    function isValidSongId(songId) {
        return request.resource.data.videoId == songId;
    }

    match /users/{userId} {
      /**
       * @description Manages user profile information.
       * @path /users/{userId}
       * @allow (create) User with UID 'user123' can create their profile.
       * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
       * @principle Enforces user-ownership for user profiles.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/playlists/{playlistId} {
      /**
       * @description Manages user-created playlists.
       * @path /users/{userId}/playlists/{playlistId}
       * @allow (create) User with UID 'user123' can create a playlist under their profile.
       * @deny (update) User with UID 'user456' cannot update a playlist under 'user123'.
       * @principle Enforces user-ownership for playlists.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
        /**
         * @description Manages songs within a user's playlist.
         * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
         * @allow (create) User with UID 'user123' can add a song to their playlist.
         * @deny (delete) User with UID 'user456' cannot delete a song from 'user123's playlist.
         * @principle Enforces user-ownership for playlist songs.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    match /songs/{songId} {
        /**
         * @description Manages the global song catalog. Publicly readable, but writes require ownership.
         * @path /songs/{songId}
         * @allow (get, list) Any user can read song information.
         * @allow (create) User with UID 'user123' can create a song with videoId matching songId.
         * @deny (update) User with UID 'user456' cannot update a song not owned by them.
         * @principle Allows public read access but enforces ownership for write operations, validating the videoId and songId relation.
         */
        allow get, list: if true;
        allow create: if isSignedIn() && isValidSongId(songId);
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    match /songs/{songId}/messages/{messageId} {
      /**
       * @description Manages chat messages for a song.
       * @path /songs/{songId}/messages/{messageId}
       * @allow (get, list) Any user can read chat messages.
       * @allow (create) Any authenticated user can create a chat message.
       * @deny (update, delete) Only the creator can update/delete a message (Not Implemented).
       */
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    match /users/{userId}/followers/{followerId} {
      /**
       * @description Manages the list of followers for a user.
       * @path /users/{userId}/followers/{followerId}
       * @allow (get, list) The owner of the profile can view their followers.
       * @allow (create) The owner of the profile can add new followers.
       * @deny (update, delete) No one can update or delete followers.
       * @principle Enforces user-ownership for follower lists.
       */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }

    match /users/{userId}/following/{followingId} {
      /**
       * @description Manages the list of users a user is following.
       * @path /users/{userId}/following/{followingId}
       * @allow (get, list) The owner of the profile can view who they are following.
       * @allow (create) The owner of the profile can add new users to follow.
       * @deny (update, delete) No one can update or delete who they are following.
       * @principle Enforces user-ownership for following lists.
       */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }
  }
}