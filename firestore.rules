/**
 * @file Firestore Security Rules for Aura Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model,
 * ensuring that only the authenticated user can access their own data. This
 * includes user profiles, songs, and playlists.  There is no support for shared
 * resources in the current data model.
 *
 * @data_structure
 * The Firestore database is structured as follows:
 * - `/artifacts/Aura/users/{userId}`: Stores user profile information.
 * - `/artifacts/Aura/users/{userId}/songs/{songId}`: Stores songs owned by the user.
 * - `/artifacts/Aura/users/{userId}/playlists/{playlistId}`: Stores playlists created by the user.
 *
 * @key_security_decisions
 * - **Ownership**: All data is nested under a user's ID, and only the
 *   authenticated user matching that ID can read or write to that data.
 * - **No Listing All Users**: Listing all users is explicitly denied to protect
 *   user privacy.
 * - **Denormalization for Authorization**:  The `userId` is present in the path
 *   for songs and playlists, removing the need to duplicate this data in the
 *   document itself.
 * - **Data Validation (Limited)**:  While the rules do not enforce a strict schema,
 *   they do validate the `userId` on `create` operations to ensure that the
 *   document is created under the correct user path.  On `update`, the `userId`
 *   is immutable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) - Authenticated user with matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching {userId} can read, update, and delete their profile.
     * @deny (create) - Authenticated user trying to create a profile with a mismatched {userId}.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/Aura/users/{userId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the user exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read their own profile
      allow get: if isOwner(userId);

      // Allow the user to update their own profile if the userId matches their auth.uid
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);

      // Prevent listing all users
      allow list: if false;
    }

    /**
     * @description Controls access to song documents within a user's collection.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) - Authenticated user with matching {userId} can create a song in their collection.
     * @allow (get, list, update, delete) - Authenticated user with matching {userId} can read, list, update, and delete songs in their collection.
     * @deny - Authenticated user trying to access another user's songs.
     * @principle Enforces document ownership for writes; allows owner-only reads and lists.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the user exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a song if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get their own songs
      allow get: if isOwner(userId);

      // Allow the user to list their own songs
      allow list: if isOwner(userId);

      // Allow the user to update their own songs if the userId matches their auth.uid
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete their own songs
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to playlist documents within a user's collection.
     * @path /artifacts/Aura/users/{userId}/playlists/{playlistId}
     * @allow (create) - Authenticated user with matching {userId} can create a playlist in their collection.
     * @allow (get, list, update, delete) - Authenticated user with matching {userId} can read, list, update, and delete playlists in their collection.
     * @deny - Authenticated user trying to access another user's playlists.
     * @principle Enforces document ownership for writes; allows owner-only reads and lists.
     */
    match /artifacts/Aura/users/{userId}/playlists/{playlistId} {
      // Function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the user exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a playlist if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get their own playlists
      allow get: if isOwner(userId);

      // Allow the user to list their own playlists
      allow list: if isOwner(userId);

      // Allow the user to update their own playlists if the userId matches their auth.uid
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete their own playlists
      allow delete: if isExistingOwner(userId);
    }
  }
}