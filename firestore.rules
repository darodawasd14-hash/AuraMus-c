/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and playlists.
 * Users can only read and write their own profile data and playlists. Public read access is granted for songs.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs for a specific playlist.
 * - /songs/{songId}: Stores all songs added by any user.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a specific song.
 *
 * Key Security Decisions:
 * - Users can only manage their own playlists.
 * - Public read access to songs is allowed, but write access is restricted to owners (if implemented).
 * - Listing all users is not allowed.
 *
 * Denormalization for Authorization:
 * - Playlists have a `userId` field to easily check ownership.
 * - Songs could have a `userId` to implement owner-only edits.
 *
 * Structural Segregation:
 * - User-specific playlists are stored in a private subcollection under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile document at /users/user123 if the document's 'id' matches the UID.
     * @allow (get) - User with UID 'user123' can read their profile document at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document at /users/anotherUser.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to user-specific playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User with UID 'user123' can create a playlist under /users/user123/playlists/playlist1.
     * @allow (get) - User with UID 'user123' can read a playlist under /users/user123/playlists/playlist1.
     * @allow (list) - User with UID 'user123' can list playlists under /users/user123/playlists.
     * @allow (update) - User with UID 'user123' can update a playlist under /users/user123/playlists/playlist1.
     * @allow (delete) - User with UID 'user123' can delete a playlist under /users/user123/playlists/playlist1.
     * @deny (create) - User with UID 'anotherUser' cannot create a playlist under /users/user123/playlists.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get) - User with UID 'user123' can read a song under /users/user123/playlists/playlist1/songs/song1.
     * @allow (list) - User with UID 'user123' can list songs under /users/user123/playlists/playlist1/songs.
     * @allow (create) - User with UID 'user123' can create a song under /users/user123/playlists/playlist1/songs.
     * @allow (update) - User with UID 'user123' can update a song under /users/user123/playlists/playlist1/songs/song1.
     * @allow (delete) - User with UID 'user123' can delete a song under /users/user123/playlists/playlist1/songs/song1.
     * @deny (create) - User with UID 'anotherUser' cannot create a song under /users/user123/playlists/playlist1/songs.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) - Any user can read a song's metadata.
     * @allow (list) - Any user can list songs.
     * @deny (create) - No one can create a song without proper authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) - No one can update a song without proper authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) - No one can delete a song without proper authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get) - Any user can read a message.
     * @allow (list) - Any user can list messages.
     * @allow (create) - Any signed-in user can create a message.
     * @deny (update) - No one can update a message after creation.
     * @deny (delete) - No one can delete a message.
     * @principle Allows public read access, signed-in user write access, and restricts modification/deletion.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}