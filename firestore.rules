rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read any user profile.
     * @allow (create) A user can create their own profile.
     * @allow (update) A user can update their own profile.
     * @allow (delete) A user can delete their own profile.
     * @deny (get) An anonymous user attempts to read a profile.
     * @deny (update) A user attempts to update another user's profile.
     * @principle Enforces user ownership and authenticated access.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) A user can create a playlist under their own user ID.
     * @allow (get) A user can get a playlist under their own user ID.
     * @allow (update) A user can update a playlist under their own user ID.
     * @allow (delete) A user can delete a playlist under their own user ID.
     * @allow (list) A user can list playlists under their own user ID.
     * @deny (create) A user attempts to create a playlist under another user's ID.
     * @principle Enforces user ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) A user can add a song to their own playlist.
     * @allow (get) A user can get a song from their own playlist.
     * @allow (update) A user can update a song in their own playlist.
     * @allow (delete) A user can delete a song from their own playlist.
     * @allow (list) A user can list songs in their own playlist.
     * @deny (create) A user attempts to add a song to another user's playlist.
     * @principle Enforces user ownership for playlist songs.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) Anyone can read a song.
     * @allow (list) Anyone can list songs.
     * @deny (create) No one can create a new song without validation. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update a song without validation. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete a song without validation. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read access with owner-only writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get) Any signed-in user can read a message.
     * @allow (update) Any signed-in user can update a message.
     * @allow (delete) Any signed-in user can delete a message.
     * @allow (list) Any signed-in user can list messages.
     * @deny (create) An anonymous user attempts to create a message.
     * @principle Allows any signed-in user to participate in song chats.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to the followers list for a user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (create) A user can be added to another user's followers list.
      * @allow (get) A user can read the followers list of another user.
      * @allow (list) A user can list their followers.
      * @allow (update) No one can update this list.
      * @allow (delete) A user can be removed from another user's followers list.
      * @deny (create) A user cannot create followers for another user.
      * @principle Restricts followers modifications.
      */
     match /users/{userId}/followers/{followerId} {
        allow get: if true;
        allow list: if isOwner(userId);
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }

     /**
      * @description Controls access to the following list for a user.
      * @path /users/{userId}/following/{followingId}
      * @allow (create) A user can add to their own following list.
      * @allow (get) A user can read the following list of another user.
      * @allow (list) A user can list who they are following.
      * @allow (update) No one can update this list.
      * @allow (delete) A user can remove from their own following list.
      * @deny (create) A user cannot create following for another user.
      * @principle Restricts following modifications.
      */
     match /users/{userId}/following/{followingId} {
        allow get: if true;
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isOwner(userId);
     }

     /**
      * @description Controls access to chat documents between users.
      * @path /chats/{chatId}
      * @allow (create) If the user is a participant.
      * @allow (get) If the user is a participant.
      * @allow (update) If the user is a participant.
      * @allow (delete) If the user is a participant.
      * @allow (list) No listing.
      * @deny (create) If the user is not a participant.
      * @principle Restricts chat access to participants.
      */
    match /chats/{chatId} {
      allow get: if request.auth.uid in resource.data.participantIds;
      allow list: if false;
      allow create: if request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth.uid in resource.data.participantIds;
      allow delete: if request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Controls access to messages within a chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) If the user is a participant.
     * @allow (get) If the user is a participant.
     * @allow (update) If the user is a participant.
     * @allow (delete) If the user is a participant.
     * @allow (list) If the user is a participant.
     * @deny (create) If the user is not a participant.
     * @principle Restricts chat message access to participants.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow list: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      allow update: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds && request.auth.uid == resource.data.senderId;
      allow delete: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds && request.auth.uid == resource.data.senderId;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}