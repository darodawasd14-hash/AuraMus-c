rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure user playlists. Users can only read and write their own playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/playlists/playlist456.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/playlists/playlist456.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure songs within user playlists. Users can only read and write songs in their own playlists.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/playlists/playlist456/songs/song789.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/playlists/playlist456/songs/song789.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure the global song catalog. Public read, owner-only writes.
     * @path /songs/{songId}
     * @allow (get, list) Anyone can read the global song catalog.
     * @allow (create) User with ID 'user123' can create a song in /songs if authorId matches.
     * @allow (update, delete) User with ID 'user123' can update/delete a song in /songs if they are the author.
     * @deny (create) User with ID 'user456' cannot create a song with authorId 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update/delete a song authored by 'user123'.
     * @principle Public read access with owner-only writes.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(ownerId) {
        return isOwner(ownerId);
      }
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(request.auth.uid);
      allow delete: if isOwner(request.auth.uid);
    }

    /**
     * @description Secure chat messages for songs. Only authenticated users can create messages.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create) Authenticated users can read and create messages.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Authenticated users can create, but not modify, messages.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

     /**
     * @description Secure follower relationships. Users can only read and write their own follower data.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/followers/follower456.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/followers/follower456.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure following relationships. Users can only read and write their own following data.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123/following/following456.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123/following/following456.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}