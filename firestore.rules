/**
 * @fileoverview Firestore Security Rules for Aura Music App
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with some shared access components.
 * Users have full control over their own data (profile, songs). Chat messages associated with songs
 * are accessible to anyone, enabling public discussion around music.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: User profile information.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Songs owned by a specific user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Chat messages for a song. These messages are "public".
 *
 * Key Security Decisions:
 * - User profiles and songs are strictly owned and controlled by individual users.
 * - Chat messages are publicly readable and writable, facilitating open discussions around songs.
 * - No user listing is allowed to prevent unauthorized data scraping.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly needed in this ruleset as ownership is derived directly from the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own ID.
     * @deny (get, update, delete) User cannot access other user's profiles.
     * @principle Enforces document ownership, allowing users to manage their own profiles.
     */
    match /artifacts/Aura/users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-specific song access.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create, get, update, delete, list) Authenticated user can manage their own songs.
     * @deny (create, get, update, delete, list) User cannot access other user's songs.
     * @principle Enforces document ownership, allowing users to manage their own songs.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Manages public chat messages for songs.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) Everyone can read the chat messages.
     * @allow (create) Any authenticated user can post a message.
     * @deny (update, delete) Messages cannot be updated or deleted.
     * @principle Allows public read access for chat messages, but restricts modification.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Combines the owner check with an existence check.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}