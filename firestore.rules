rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin by verifying the existence of their document in the `/roles_admin` collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }


    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @principle Enforces document ownership for writes; only the authenticated user can create their own profile.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages songs owned by a specific user.
     * @path /users/{userId}/songs/{songId}
     * @allow (create) User with UID 'user123' can create a song at /users/user123/songs/song456.
     * @deny (create) User with UID 'user123' cannot create a song at /users/user456/songs/song456.
     * @principle Enforces document ownership for writes; only the authenticated user can create, update, or delete their own songs.
     */
    match /users/{userId}/songs/{songId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages playlists created by a specific user.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with UID 'user123' can create a playlist at /users/user123/playlists/playlist456.
     * @deny (create) User with UID 'user123' cannot create a playlist at /users/user456/playlists/playlist456.
     * @principle Enforces document ownership for writes; only the authenticated user can create, update, or delete their own playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages smart playlists generated for a specific user.
     * @path /users/{userId}/smartPlaylists/{smartPlaylistId}
     * @allow (create) User with UID 'user123' can create a smart playlist at /users/user123/smartPlaylists/smartPlaylist456.
     * @deny (create) User with UID 'user123' cannot create a smart playlist at /users/user456/smartPlaylists/smartPlaylist456.
     * @principle Enforces document ownership for writes; only the authenticated user can create, update, or delete their own smart playlists.
     */
    match /users/{userId}/smartPlaylists/{smartPlaylistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Indicates admin role for a user. Document existence grants admin privileges.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isAdmin();
    }
  }
}