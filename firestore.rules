rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can access/modify their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile for another user.
     *   request.auth.uid != 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot access/modify user 'user123's profile.
     *   request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User 'user123' can create a playlist in their own profile.
     *   request.auth.uid == 'user123' and request.resource.data.userId == 'user123'
     * @allow (get, update, delete) User 'user123' can access/modify their own playlist.
     *   request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @deny (create) User 'user456' cannot create a playlist for user 'user123'.
     *   request.auth.uid != 'user123'
     * @deny (get, update, delete) User 'user456' cannot access/modify user 'user123's playlist.
     *   request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isPlaylistOwner(userId) {
          return resource.data.userId == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Controls access to songs within a playlist.
       * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
       * @allow (create) User 'user123' can add a song to their own playlist.
       *   request.auth.uid == 'user123'
       * @allow (get, update, delete) User 'user123' can access/modify songs in their own playlist.
       *   request.auth.uid == 'user123'
       * @deny (create) User 'user456' cannot add a song to user 'user123's playlist.
       *   request.auth.uid != 'user123'
       * @deny (get, update, delete) User 'user456' cannot access/modify songs in user 'user123's playlist.
       *   request.auth.uid != 'user123'
       * @principle Enforces document ownership for writes.
       */
      match /songs/{songId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isPlaylistOwner(userId) {
            return get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == userId;
        }

        function isExistingOwner(userId) {
          return request.auth.uid == get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)/songs/$(songId)).data.userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Anyone can read the song catalog.
     *   true
     * @deny (create, update, delete) No one can create, update, or delete songs directly.
     *   false
     * @principle Allows public read access to the song catalog, restricts write access.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any authenticated user can create a message.
     *   request.auth != null
     * @allow (get, list) Anyone can read messages for a song.
     *   true
     * @deny (update, delete) No one can update or delete messages.
     *   false
     * @principle Allows any authenticated user to create messages.
     */
    match /songs/{songId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to user followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) A user can add themselves as a follower of another user.
     *   request.auth.uid == request.resource.data.uid
     * @allow (get, list) A user can view their own followers.
     *   request.auth.uid == userId
     * @deny (update, delete) No one can update or delete follower information.
     *   false
     * @principle Allows a user to manage their own followers.
     */
    match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return request.auth.uid == userId && exists(/databases/$(database)/documents/users/$(userId)/followers/$(followerId));
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to users being followed.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) A user can follow another user.
     *   request.auth.uid == userId
     * @allow (get, list) A user can view who they are following.
     *   request.auth.uid == userId
     * @deny (update, delete) No one can update or delete following information.
     *   false
     * @principle Allows a user to manage who they are following.
     */
    match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return request.auth.uid == userId && exists(/databases/$(database)/documents/users/$(userId)/following/$(followingId));
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }
  }
}