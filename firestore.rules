/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and playlists.
 * Chat access is controlled by shared access (closed collaborators).
 * Public read access is granted to the global song catalog.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists, owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a playlist, owned by the user.
 * - /songs/{songId}: Global song catalog, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song, publicly readable, but no writes allowed.
 * - /users/{userId}/followers/{followerId}: Followers of a user.
 * - /users/{userId}/following/{followingId}: Users followed by a user.
 * - /chats/{chatId}: Chat sessions between users, access controlled by the participant list.
 * - /chats/{chatId}/messages/{messageId}: Chat messages within a session, access controlled by the participant list of the parent chat.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and playlists.
 * - The global song catalog is publicly readable but not writable (owner-only writes are not applicable as there is no owner field).
 * - Chat access is restricted to participants in the chat session.
 * - Listing of followers and followings is allowed to the user.
 *
 * Denormalization for Authorization:
 * - Chats denormalize `participantIds` to control access to chat messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create, update, delete) User with matching userId can create, update, and delete their own profile.
     * @allow (get, list) User with matching userId can get and list their own profile.
     * @deny (create, update, delete) User tries to create, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, update, delete) User with matching userId can create, update, and delete their own playlists.
     * @allow (get, list) User with matching userId can get and list their own playlists.
     * @deny (create, update, delete) User tries to create, update, or delete another user's playlists.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a specific playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, update, delete) User with matching userId can create, update, and delete songs in their own playlists.
     * @allow (get, list) User with matching userId can get and list songs in their own playlists.
     * @deny (create, update, delete) User tries to create, update, or delete songs in another user's playlists.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Anyone can read the global song catalog.
     * @deny (create, update, delete) No one can create, update, or delete songs in the global catalog without proper validation (missing ownership field).
     * @principle Allows public read access to the global song catalog.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
       // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song (publicly readable).
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Anyone can read chat messages for a specific song.
     * @deny (create, update, delete) No one can create, update, or delete chat messages for a specific song.
     * @principle Allows public read access to song messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) User with matching userId can get and list their own followers.
     * @deny (create, update, delete) Only the system should manage follower relationships.
     * @principle Enforces document ownership for listing followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) User with matching userId can get and list the users they are following.
     * @deny (create, update, delete) Only the system should manage following relationships.
     * @principle Enforces document ownership for listing followings.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to chat sessions between users.
     * @path /chats/{chatId}
     * @allow (get, list) Users who are participants in the chat can get and list the chat.
     * @allow (create) Users can create new chat with them as participant.
     * @allow (update) Only participants in the chat can update the chat metadata.
     * @allow (delete) Only participants in the chat can delete the chat.
     * @deny (get, list, create, update, delete) Users who are not participants in the chat cannot access it.
     * @principle Enforces shared access based on the `participantIds` array.
     */
    match /chats/{chatId} {
      allow get, list: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Controls access to messages within a specific chat session.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Users who are participants in the parent chat can get and list the messages.
     * @allow (create) Users who are participants in the parent chat can create messages.
     * @deny (update, delete) Messages should not be updated or deleted (append-only log).
     * @deny (get, list, create) Users who are not participants in the parent chat cannot access the messages.
     * @principle Enforces shared access based on the `participantIds` array in the parent chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}