rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses and modifies their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile for another user.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Manages user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - Authenticated user creates a playlist under their profile.
     * @allow (get, list, update, delete) - Authenticated user accesses and modifies their own playlists.
     * @deny (create) - Unauthorized user attempts to create a playlist for another user.
     * @principle Enforces user-ownership for playlist data.
     */
    match /users/{userId}/playlists/{playlistId} {
     function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Manages songs within a specific playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - Authenticated user creates a song under their playlist.
     * @allow (get, list, update, delete) - Authenticated user accesses and modifies songs in their own playlists.
     * @deny (create) - Unauthorized user attempts to create a song for another user's playlist.
     * @principle Enforces user-ownership for songs within a playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Manages songs in a global catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Allows public read access to all songs.
     * @allow (create) - Authenticated user can add new songs.
     * @allow (update, delete) - Authenticated user can update and delete songs.
     * @principle Allows public read access with authenticated writes.
     */
    match /songs/{songId} {
     function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Manages chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Allows public read access to chat messages.
     * @allow (create) - Authenticated user can send chat messages.
     * @allow (update, delete) - Authenticated user can update and delete their own messages.
     * @deny (create) - Unauthorized user attempts to create a chat message as another user.
     * @principle Allows public read access with authenticated writes.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(senderUid) {
        return request.auth.uid == resource.data.senderUid;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isOwner(resource.data.senderUid);
    }

    /**
     * @description Manages the list of users following a specific user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) - Allows public listing of followers.
     * @allow (create) - Authenticated user can follow another user.
     * @allow (update, delete) - Authenticated user can update and delete the users they are following.
     * @principle Allows public read access with authenticated writes.
     */
     match /users/{userId}/followers/{followerId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if false;
    }

    /**
     * @description Manages the list of users that a specific user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) - Allows public listing of followed users.
     * @allow (create) - Authenticated user can follow another user.
     * @allow (update, delete) - Authenticated user can update and delete the users they are following.
     * @principle Allows public read access with authenticated writes.
     */
    match /users/{userId}/following/{followingId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if false;
    }

    /**
     * @description Manages private chat rooms between users.
     * @path /chats/{chatId}
     * @allow (get, list, create, update, delete) - All authenticated users can access and manage chat rooms.
     * @principle Open access for authenticated users.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Manages messages within a specific chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list, create, update, delete) - All authenticated users can access and manage chat messages.
     * @principle Open access for authenticated users.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isChatParticipant(chatId) {
        return get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
      allow get, list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update, delete: if isSignedIn() && isChatParticipant(chatId);
    }
  }
}