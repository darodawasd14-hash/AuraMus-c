rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with the matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read, write) if the request is made by the user with the matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read, write) if the request is made by the user with the matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (read) to everyone.
     * @allow (create) if the user is authenticated and sets the 'ownerId' field to their UID.
     * @allow (update, delete) if the user is authenticated and is the owner of the song.
     * @deny (create, update, delete) if the 'ownerId' field is missing or does not match the authenticated user's UID.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for songs.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read, write) to everyone.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
   /**
     * @description Controls access to followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (read, write) if the request is made by the user with the matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     *  @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if request.auth.uid == userId;
        allow update: if false;
        allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to users followed by a user.
     * @path /users/{userId}/following/{followingId}
     * @allow (read, write) if the request is made by the user with the matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     *  @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if request.auth.uid == userId;
        allow update: if false;
        allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (read, write) if the request is made by a participant of the chat.
     * @deny (read, write) if the request is made by a user who is not a participant.
     *  @principle Enforces shared access control based on the 'participantIds' array.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }

      allow get: if isSignedIn() && 'participantIds' in resource.data && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn(); // Anyone signed in can list chats to discover them
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['participantIds']) && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn() && resource != null && 'participantIds' in resource.data && request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Deleting a chat is not allowed.
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) if the request is made by a participant of the chat.
     * @deny (read, write) if the request is made by a user who is not a participant.
     *  @principle Enforces shared access control based on the parent chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isChatParticipant() {
          return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.keys().hasAll(['participantIds']) && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        }

        allow get: if isSignedIn() && isChatParticipant();
        allow list: if false;
        allow create: if isSignedIn() && isChatParticipant();
        allow update: if isSignedIn() && isChatParticipant();
        allow delete: if isSignedIn() && isChatParticipant();
    }
  }
}