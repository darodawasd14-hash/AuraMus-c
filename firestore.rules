/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing public discoverability with user-specific ownership and control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owning user.
 * - /users/{userId}/playlist/{songId}: Stores user-specific playlists, accessible only to the owning user.
 * - /songs/{songId}: Stores a global catalog of songs, publicly readable but writable only by the owning user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage songs in their own playlists.
 * - The global song catalog is publicly readable, but song creation, updates, and deletions are restricted to the song's owner.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Song` entity includes a `userId` field to enable owner-based access control in the `/songs` collection. This avoids costly `get()` operations to a user's profile.
 *
 * Structural Segregation:
 * - User-specific playlist data is stored in a private subcollection (`/users/{userId}/playlist/{songId}`), separate from the public `/songs` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, update, delete) - If the user ID in the path matches the authenticated user's ID.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific playlist subcollection.
     * @path /users/{userId}/playlist/{songId}
     * @allow (create, get, list, update, delete) - If the user ID in the path matches the authenticated user's ID.
     * @deny (create, get, list, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Restricts access to a user's own playlist data.
     */
    match /users/{userId}/playlist/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the global songs collection.
     * @path /songs/{songId}
     * @allow (get, list) - Public read access for all users.
     * @allow (create) - If the 'userId' field in the request matches the authenticated user's ID.
     * @allow (update, delete) - If the 'userId' field in the existing document matches the authenticated user's ID.
     * @deny (create) - If the 'userId' field in the request does not match the authenticated user's ID.
     * @deny (update, delete) - If the 'userId' field in the existing document does not match the authenticated user's ID.
     * @principle Allows public reading but restricts write access to the song's owner.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}