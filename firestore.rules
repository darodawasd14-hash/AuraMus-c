/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own resources.
 * Public read access is granted to certain collections like /songs/{songId}.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. User-owned.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists. User-owned.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within playlists. User-owned.
 * - /songs/{songId}: Stores a global catalog of songs. Publicly readable, owner-writable.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for songs. Authenticated users can write, publicly readable.
 * - /users/{userId}/followers/{followerId}: Stores follower relationships. User-owned.
 * - /users/{userId}/following/{followingId}: Stores following relationships. User-owned.
 * - /chats/{chatId}: Stores chat sessions between users. Shared access based on `participantIds`.
 * - /chats/{chatId}/messages/{messageId}: Stores chat messages. Shared access based on `participantIds`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access for the /songs/{songId} collection to allow for a global song catalog.
 * - Strict ownership for playlists and songs within playlists.
 * - Chat access is controlled through the `participantIds` array on the chat document.
 *
 * Denormalization for Authorization:
 * - The `Playlist` entity includes a `userId` field to simplify ownership checks.
 * - The `Message` entity includes a `sender.uid` field for simplified authorization.
 * - The `Chat` entity contains a `participantIds` array for easy access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and manage their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - Authenticated user can create a playlist under their profile.
     * @allow (get, list, update, delete) - Authenticated user can access and manage their own playlists.
     * @deny (create) - Unauthenticated user attempts to create a playlist.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's playlists.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a specific user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - Authenticated user can add a song to their playlist.
     * @allow (get, list, update, delete) - Authenticated user can access and manage songs in their own playlists.
     * @deny (create) - Unauthenticated user attempts to add a song to a playlist.
     * @deny (get, list, update, delete) - Authenticated user attempts to access songs in another user's playlist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Allow public read access to all songs.
     * @allow (create) - Authenticated user can create a song, must set `authorId` to their uid.
     * @allow (update, delete) - Only the author can update or delete a song.
     * @deny (create) - Unauthenticated user attempts to create a song.
     * @deny (update, delete) - Authenticated user attempts to modify a song they don't own.
     * @principle Public read with owner-only writes.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.authorId;
      allow delete: if request.auth.uid == resource.data.authorId;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Allow public read access to all messages for a song.
     * @allow (create) - Authenticated user can create a message, must set `sender.uid` to their uid.
     * @deny (create) - Unauthenticated user attempts to create a message.
     * @principle Authenticated users can write, publicly readable.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to the list of users who are following a specific user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (get, list) - Only the user being followed can list their followers.
      * @allow (create) - Anyone can create a follow request to follow a user.
      * @allow (delete) - Only the follower can delete their follow request (unfollow).
      * @deny (get, list) - Another user attempts to list the followers of a user.
      * @principle Enforces document ownership for reads, allows anyone to create a follow request.
      */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if request.auth.uid == followerId;
    }

    /**
     * @description Controls access to the list of users a specific user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) - Only the user can list who they are following.
     * @allow (create) - A user can create an entry to follow another user.
     * @allow (delete) - A user can delete an entry to unfollow another user.
     * @deny (get, list) - Another user attempts to list who a user is following.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to private chat sessions between users.
     * @path /chats/{chatId}
     * @allow (get, list) - Only participants can access the chat session.
     * @allow (create) - Only participants can initiate a chat session.
     * @allow (update) - Only participants can update chat session (e.g., last message).
     * @deny (get, list) - Non-participants attempt to access the chat session.
     * @principle Shared access based on `participantIds`.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
        return isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      }

      allow get: if isParticipant();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isParticipant();
      allow delete: if false;
    }

    /**
     * @description Controls access to messages within a specific chat session.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Only participants of the chat can access messages.
     * @allow (create) - Only participants of the chat can create messages.
     * @deny (get, list) - Non-participants attempt to access messages.
     * @principle Shared access based on `participantIds`.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(chatId) {
        return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
      allow get: if isParticipant(getChatId());
      allow list: if isParticipant(getChatId());
      allow create: if isSignedIn() && isParticipant(getChatId());
      allow update: if false;
      allow delete: if false;

      function getChatId() {
        return request.path[6];
      }
    }
  }
}