/**
 * @file Firestore Security Rules for Aura Music App
 * @description This ruleset enforces a strict user-ownership model for user profiles and songs.
 *  Admins have read and write access to all parts of the database.
 *
 * Data Structure:
 * - /admins/{userId}: Stores admin user IDs and metadata.
 * - /artifacts/Aura/users/{userId}: Stores user profiles.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Stores songs specific to each user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Stores chat messages for a specific song.
 * - /artifacts/Aura/catalog/{songId}: Stores the public music catalog.
 *
 * Key Security Decisions:
 * - User profiles and songs are strictly owned by the user; only the owner or an admin can modify them.
 * - The public music catalog is read-only for all users. Only admins can add, update, or delete catalog songs.
 * - Listing of user documents is denied to prevent unauthorized discovery of user IDs.
 *
 * Denormalization for Authorization:
 *  - The rules use path-based authorization (e.g., `isOwner(userId)`) to avoid costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Rules for the /admins/{userId} collection.
     * @path /admins/{userId}
     * @allow (read, write): if isAdmin() - An admin can read/write any admin document.
     * @deny (read, write): if !isAdmin() - A non-admin cannot read/write admin documents.
     * @principle Enforces admin-only access to admin data.
     */
    match /admins/{userId} {
      allow get: if isAdmin();
      allow list: if false; // prevent listing of admin users
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /artifacts/Aura/users/{userId} collection.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create): if isOwner(userId) - Allows a user to create their own profile.
     * @allow (get, update, delete): if isOwner(userId) - Allows a user to read, update, and delete their own profile.
     * @deny (create, get, update, delete): if !isOwner(userId) - Denies other users from accessing the profile.
     * @principle Enforces user ownership for user profiles.
     */
    match /artifacts/Aura/users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /artifacts/Aura/users/{userId}/songs/{songId} collection.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (get, list, create, update, delete): if isOwner(userId) - Allows a user to manage their own songs.
     * @deny (get, list, create, update, delete): if !isOwner(userId) - Denies other users from accessing the songs.
     * @principle Enforces user ownership for songs.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /artifacts/Aura/songs/{songId}/messages/{messageId} collection.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list, create): if isSignedIn() - Allows any signed-in user to read and create messages.
     * @deny (update, delete): if !isAdmin() - Only admins can edit or delete messages.
     * @principle Allows public read access with admin-only writes for messages.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /artifacts/Aura/catalog/{songId} collection.
     * @path /artifacts/Aura/catalog/{songId}
     * @allow (get, list): if true - Allows any user to read the catalog.
     * @deny (create, update, delete): if !isAdmin() - Only admins can modify the catalog.
     * @principle Allows public read access with admin-only writes for catalog.
     */
    match /artifacts/Aura/catalog/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}