/**
 * @file Firebase Security Rules for Aura Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data,
 *  while allowing public read access to a global song catalog.  Write access to user-owned
 *  data is restricted to the user themselves.  The song catalog allows any authenticated user
 *  to create new songs, but only the creator can modify or delete them.  Listing of user followers
 *  and followees is restricted to the user itself.
 *
 * @data_structure
 *  - /users/{userId}: User profile information.
 *  - /users/{userId}/playlists/{playlistId}: User-created playlists.
 *  - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a playlist.
 *  - /songs/{songId}: A global catalog of songs.
 *  - /songs/{songId}/messages/{messageId}: Chat messages for a specific song.
 *  - /users/{userId}/followers/{followerId}: Users following a given user.
 *  - /users/{userId}/following/{followingId}: Users followed by a given user.
 *
 * @key_security_decisions
 *  - User profiles are private and only accessible to the owning user.
 *  - The song catalog is publicly readable, but write access is restricted to the song creator.
 *  - Listing of user followers and followees is restricted to the user itself.
 *
 * @denormalization_for_authorization N/A - Current rules do not require denormalization.
 * @structural_segregation Public songs are stored in a top-level collection (`/songs`), while
 *  private user data is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) Authenticated user cannot create another user's profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) Authenticated user can create playlists under their own user ID.
     * @allow (get) Authenticated user can read playlists under their own user ID.
     * @allow (update) Authenticated user can update playlists under their own user ID.
     * @allow (delete) Authenticated user can delete playlists under their own user ID.
     * @deny (create) Authenticated user cannot create playlists under another user's ID.
     * @deny (get) Authenticated user cannot read playlists under another user's ID.
     * @deny (update) Authenticated user cannot update playlists under another user's ID.
     * @deny (delete) Authenticated user cannot delete playlists under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) Authenticated user can add songs to their own playlist.
     * @allow (get) Authenticated user can read songs from their own playlist.
     * @allow (update) Authenticated user can update songs from their own playlist.
     * @allow (delete) Authenticated user can delete songs from their own playlist.
     * @deny (create) Authenticated user cannot add songs to another user's playlist.
     * @deny (get) Authenticated user cannot read songs from another user's playlist.
     * @deny (update) Authenticated user cannot update songs from another user's playlist.
     * @deny (delete) Authenticated user cannot delete songs from another user's playlist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) Any user can read any song.
     * @allow (list) Any user can list all songs.
     * @allow (create) Any authenticated user can add a song. Author is set upon creation.
     * @allow (update) Only the song's creator can update it.
     * @allow (delete) Only the song's creator can delete it.
     * @deny (update) Non-creator users cannot update a song.
     * @deny (delete) Non-creator users cannot delete a song.
     * @principle Allows public read access but restricts write access to the song creator.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if resource.data.id == request.auth.uid && resource != null;
      allow delete: if resource.data.id == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any authenticated user can create a message.
     * @allow (get) Any user can read a message.
     * @allow (list) Any user can list all messages for a song.
     * @deny (update) No one can update a message.
     * @deny (delete) No one can delete a message.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Controls access to a user's list of followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (list) Authenticated user can list their own followers.
     * @deny (list) Authenticated user cannot list another user's followers.
     * @principle Restricts access to a user's own list of followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's list of followees (users they are following).
     * @path /users/{userId}/following/{followingId}
     * @allow (list) Authenticated user can list the users they are following.
     * @deny (list) Authenticated user cannot list another user's followees.
     * @principle Restricts access to a user's own list of followees.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}