/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, playlists, follow relationships),
 * while allowing public read access to a global catalog of songs. Private chats are secured to only allow participating
 * users to read and write messages. The rules are designed to be highly secure, prioritizing authorization checks
 * over detailed data validation in this prototyping phase.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}: User-specific playlists, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist, accessible only to the owning user.
 * - /songs/{songId}: A global catalog of songs, publicly readable but writable only with a valid ownership claim.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song, accessible to anyone.
 * - /users/{userId}/followers/{followerId}: Follower relationships for a user, accessible only to the user.
 * - /users/{userId}/following/{followingId}: Following relationships for a user, accessible only to the user.
 * - /chats/{chatId}: Private chat rooms between users, accessible only to participants.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room, accessible only to participants.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The /songs collection is publicly readable, but writes require a valid `authorId` field matching the authenticated user.
 * - Data validation is minimal during the prototyping phase, focusing on authorization and relationship integrity.
 *
 * Denormalization for Authorization:
 * - The `userId` field within the `/playlists` and `/songs` subcollections of `/users/{userId}` is essential for enforcing
 *   ownership. This avoids the need for complex queries to verify ownership.
 * - The `participantIds` array within the `/chats/{chatId}` document is used to quickly verify user access to the chat room.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *    - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *    - request.auth.uid: 'user456'
     *    - request.resource.data.id: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read their playlist.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their playlist.
     *    - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their playlist.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a playlist for 'user123'.
     *    - request.auth.uid: 'user456'
     *    - request.resource.data.userId: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Controls access to songs within a playlist.
      * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
      * @allow (create) User with ID 'user123' can add a song to their playlist.
      *    - request.auth.uid: 'user123'
      * @allow (get) User with ID 'user123' can read a song from their playlist.
      *    - request.auth.uid: 'user123'
      * @allow (update) User with ID 'user123' can update a song in their playlist.
      *    - request.auth.uid: 'user123'
      * @allow (delete) User with ID 'user123' can delete a song from their playlist.
      *    - request.auth.uid: 'user123'
      * @deny (create) User with ID 'user456' cannot add a song to user 'user123's playlist.
      *    - request.auth.uid: 'user456'
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) Any user can read a song.
     * @allow (list) Any user can list songs.
     * @allow (create) User can create a song with their ID as the owner.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.authorId: 'user123'
     * @allow (update) User can update a song if they are the owner.
     *    - request.auth.uid: 'user123'
     *    - resource.data.authorId: 'user123'
     * @allow (delete) User can delete a song if they are the owner.
     *    - request.auth.uid: 'user123'
     *    - resource.data.authorId: 'user123'
     * @deny (create) User cannot create a song without a valid authorId.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.authorId: null
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get) Any user can read a message.
     * @allow (list) Any user can list messages.
     * @allow (create) Any user can create a message.
     * @allow (update) Any user can update a message.
     * @allow (delete) Any user can delete a message.
     * @principle Allows public access to song messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to follower relationships.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) User can add a follower.
     *    - request.auth.uid: 'user123'
     * @allow (get) User can read their followers.
     *    - request.auth.uid: 'user123'
     * @allow (list) User can list their followers.
     *    - request.auth.uid: 'user123'
     * @allow (update) User cannot update a follower (followers are added/removed).
     * @allow (delete) User can remove a follower.
     *    - request.auth.uid: 'user123'
     * @deny (create) Another user cannot add a follower to user123.
     *    - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to following relationships.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) User can follow another user.
     *    - request.auth.uid: 'user123'
     * @allow (get) User can read who they are following.
     *    - request.auth.uid: 'user123'
     * @allow (list) User can list who they are following.
     *    - request.auth.uid: 'user123'
     * @allow (update) User cannot update who they are following (following relationships are added/removed).
     * @allow (delete) User can unfollow another user.
     *    - request.auth.uid: 'user123'
     * @deny (create) Another user cannot make user123 follow someone.
     *    - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get) User can read a chat if they are a participant.
     *    - request.auth.uid: 'user123'
     *    - resource.data.participantIds: ['user123', 'user456']
     * @allow (list) No listing of all chats.
     * @allow (create) User can create a chat if they are a participant.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.participantIds: ['user123', 'user456']
     * @allow (update) Only participants can update the chat metadata.
     *    - request.auth.uid: 'user123'
     *    - resource.data.participantIds: ['user123', 'user456']
     * @allow (delete) No deletion of chats.
     * @deny (create) User cannot create a chat if they are not a participant.
     *    - request.auth.uid: 'user789'
     *    - request.resource.data.participantIds: ['user123', 'user456']
     * @principle Enforces shared access to chat rooms via participantIds.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource != null && resource.data.participantIds.hasAny([request.auth.uid]);
      allow delete: if false;
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get) User can read a message if they are a participant in the chat.
     *    - request.auth.uid: 'user123'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @allow (list) User can list messages if they are a participant in the chat.
     *    - request.auth.uid: 'user123'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @allow (create) User can create a message if they are a participant in the chat.
     *    - request.auth.uid: 'user123'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @allow (update) User can update a message if they are a participant in the chat.
     *    - request.auth.uid: 'user123'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @allow (delete) User can delete a message if they are a participant in the chat.
     *    - request.auth.uid: 'user123'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @deny (create) User cannot create a message if they are not a participant in the chat.
     *    - request.auth.uid: 'user789'
     *    - get(/databases/$(database)/documents/chats/chat123).data.participantIds: ['user123', 'user456']
     * @principle Enforces shared access to chat messages via participantIds in the parent chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}