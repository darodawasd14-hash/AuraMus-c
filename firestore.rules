/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and songs,
 * and allows authenticated users to read chat messages and track live listeners for songs.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: User profiles.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Songs specific to each user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Chat messages for a song.
 * - /artifacts/Aura/songs/{songId}/live_listeners/{userId}: Live listener tracking for a song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and songs.
 * - All authenticated users can read messages and live listener data for songs.
 * - Only authenticated users can write messages and live listener data.
 * - Data consistency between the path and the document's internal fields will be validated on create and update operations for user-scoped documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profiles.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create, update, delete) User with ID 'user123' can create/update/delete their own profile at /artifacts/Aura/users/user123.
     * @deny (create, update, delete) User with ID 'user123' cannot create/update/delete profile of another user /artifacts/Aura/users/user456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /artifacts/Aura/users/{userId} {
      //function for checking signed in state
        function isSignedIn() {
            return request.auth != null;
        }

      //function for checking ownership
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

      allow get: if isSignedIn();
      allow list: if false; // User listing is disabled for privacy

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows users to manage their own songs.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create, update, delete) User 'user123' can create/update/delete their own song at /artifacts/Aura/users/user123/songs/song1.
     * @deny (create, update, delete) User 'user123' cannot create/update/delete songs for another user /artifacts/Aura/users/user456/songs/song1.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      //function for checking signed in state
        function isSignedIn() {
            return request.auth != null;
        }

      //function for checking ownership
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any authenticated user to read messages for a song, but only authenticated users to create them.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list) Any authenticated user can read messages for any song.
     * @allow (create) Any authenticated user can create messages for any song.
     * @deny (update, delete) No one can update or delete messages (messages are immutable).
     * @principle Public read with authenticated writes.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      //function for checking signed in state
        function isSignedIn() {
            return request.auth != null;
        }

      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read the list of live listeners for a song, and any authenticated user can create new live listeners.
     * @path /artifacts/Aura/songs/{songId}/live_listeners/{userId}
     * @allow (get, list) Any authenticated user can read live listener data.
     * @allow (create) Any authenticated user can create live listener entries.
     * @deny (update, delete) No one can update or delete live listener entries.
     * @principle Public read with authenticated writes.
     */
    match /artifacts/Aura/songs/{songId}/live_listeners/{userId} {
      //function for checking signed in state
        function isSignedIn() {
            return request.auth != null;
        }

      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}