/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and secure collaboration.
 * Users have full control over their own data, while specific collections
 * allow for controlled sharing and public access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/playlists/{playlistId}: User-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a playlist.
 * - /songs/{songId}: A global catalog of songs added by users.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song.
 * - /users/{userId}/followers/{followerId}: Users following a specific user.
 * - /users/{userId}/following/{followingId}: Users a specific user is following.
 * - /chats/{chatId}: Private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own user documents.
 * - Playlists are owned by users and only accessible to the owner unless the user's playlists are public.
 * - The song catalog is publicly readable, but only owners can create, update, or delete songs.
 * - Chat messages for songs are publicly readable, but creation is restricted to authenticated users.
 * - Private chats are accessible only to participants.
 * - Followers and Following lists are publicly readable, but only the user can modify them.
 * - Listing of songs is allowed
 *
 * Denormalization for Authorization:
 *  - The rules assume that documents contain fields necessary for authorization.
 *  For example, playlist documents should have a `userId` field indicating the owner.
 *  - The rules do not attempt to query other collections to determine access rights.
 *
 * Structural Segregation:
 *  - Private user data is stored under the `/users/{userId}` path, ensuring that
 *  only the user can access it. Public song data is stored in the top-level
 *  `/songs/{songId}` collection, allowing for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get,update,delete) User with ID 'user123' can read, update, and delete their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user456'
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User 'user123' can create a playlist under their profile.
     *   request.auth.uid == 'user123'
     * @allow (get,list,update,delete) User 'user123' can read, list, update, and delete their own playlists.
     *   request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot create a playlist under 'user456''s profile.
     *   request.auth.uid == 'user123' for /users/user456/playlists/playlist1
     * @principle Enforces user ownership for playlist data.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && (isOwner(userId) || arePlaylistsPublic(userId));
      allow list: if isSignedIn() && (isOwner(userId) || arePlaylistsPublic(userId));
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a specific playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User 'user123' can add a song to their own playlist.
     *   request.auth.uid == 'user123'
     * @allow (get,list,update,delete) User 'user123' can read, list, update and delete songs in their own playlist.
     *   request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot add a song to 'user456''s playlist.
     *   request.auth.uid == 'user123' for /users/user456/playlists/playlist1/songs/song1
     * @principle Enforces user ownership for playlist songs.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn() && (isOwner(userId) || arePlaylistsPublic(userId));
      allow list: if isSignedIn() && (isOwner(userId) || arePlaylistsPublic(userId));
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get,list) Any signed-in user can read the song catalog.
     *   isSignedIn() == true
     * @allow (create) User 'user123' can create a song.
     *   request.auth.uid == 'user123'
     * @allow (update,delete) User 'user123' can update/delete a song they own.
     *   request.auth.uid == 'user123'
     * @deny (create) Anonymous user cannot create a song.
     *   request.auth == null
     *CRITICAL: Cannot implement owner-only writes. The 'Song' entity is missing an 'ownerId' or 'authorId' field.
     */
    match /songs/{songId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get,list) Any signed-in user can read messages for a song.
     *   isSignedIn() == true
     * @allow (create) User 'user123' can create a message for a song.
     *   request.auth.uid == 'user123'
     * @deny (create) Anonymous user cannot create a message.
     *   request.auth == null
     * @principle Allows public read access, but requires authentication for creating messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

     /**
     * @description Controls access to a user's followers list.
     *  Anyone can read the list of followers of a user. Only the user can manage their own followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get,list) Any signed-in user can read the followers list.
     *   isSignedIn() == true
     * @allow (create) User 'user123' can add a follower to their own list.
     *   request.auth.uid == 'user123'
     * @allow (update,delete) User 'user123' can update/delete a follower in their own list.
     *   request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot add a follower to 'user456's list.
     *   request.auth.uid == 'user123' for /users/user456/followers/follower1
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to a user's following list.
     *  Anyone can read the list of users a user is following. Only the user can manage their own following list.
     * @path /users/{userId}/following/{followingId}
     * @allow (get,list) Any signed-in user can read the following list.
     *   isSignedIn() == true
     * @allow (create) User 'user123' can add a user to their own following list.
     *   request.auth.uid == 'user123'
     * @allow (update,delete) User 'user123' can update/delete a user in their own following list.
     *   request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot add a user to 'user456's following list.
     *   request.auth.uid == 'user123' for /users/user456/following/following1
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get,list) User 'user123' can read/list a chat they are a participant in.
     *   request.auth.uid in resource.data.participantIds
     * @allow (create) User 'user123' can create a chat if they are a participant.
     *   request.auth.uid in request.resource.data.participantIds
     * @allow (update,delete) User 'user123' can update/delete a chat they own.
     *   request.auth.uid == 'user123'
     * @deny (get,list) User 'user123' cannot read/list a chat they are not a participant in.
     *   request.auth.uid == 'user123' for /chats/chat1 where 'user123' is not in participantIds
     */
    match /chats/{chatId} {
      allow get, list: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow update: if false; // Updates are disallowed in this prototype.
      allow delete: if false; // Deletes are disallowed in this prototype.
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get,list) User 'user123' can read/list messages in a chat they participate in.
     *   request.auth.uid is in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
     * @allow (create) User 'user123' can create a message in a chat they participate in.
     *   request.auth.uid is in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
     * @deny (get,list) User 'user123' cannot read/list messages in a chat they don't participate in.
     *   request.auth.uid == 'user123' for /chats/chat1/messages/message1 where 'user123' is not in chat1.participantIds
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function arePlaylistsPublic(userId) {
       return get(/databases/$(database)/documents/users/$(userId)).data.arePlaylistsPublic == true;
    }
  }
}