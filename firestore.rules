/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data privacy and enforces strict ownership for user-specific data. Public read access is granted to the catalog, but write access is restricted.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: User profile information.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Songs specific to each user.
 * - /artifacts/Aura/songs/{songId}/messages/{messageId}: Chat messages for a specific song (public context).
 * - /artifacts/Aura/catalog/{songId}: Public music catalog.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles and songs.
 * - Listing user documents is disallowed for privacy.
 * - The public catalog is readable by anyone, but only writable by a process outside the scope of these rules (e.g., a Firebase Function with admin privileges).
 * - Chat messages are publicly accessible (read and write) for simplicity in this prototype. In a production environment, consider moderating or restricting write access.
 *
 * Denormalization for Authorization:
 *  - User-owned resources (songs) do not require denormalization because the path itself encodes ownership (/users/{userId}/songs/{songId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Users can only read and write their own profile.
     * @path /artifacts/Aura/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /artifacts/Aura/users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read, update, or delete their profile at /artifacts/Aura/users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /artifacts/Aura/users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the profile at /artifacts/Aura/users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /artifacts/Aura/users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing of user documents for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user-specific songs. Users can only manage songs under their own profile.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) User with UID 'user123' can create a song at /artifacts/Aura/users/user123/songs/song1.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, or delete their song at /artifacts/Aura/users/user123/songs/song1.
     * @deny (create) User with UID 'user456' cannot create a song at /artifacts/Aura/users/user123/songs/song1.
     * @deny (get, list, update, delete) User with UID 'user456' cannot read, list, update, or delete the song at /artifacts/Aura/users/user123/songs/song1.
     * @principle Restricts access to a user's own data tree.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and write access to chat messages for songs. Consider moderating or restricting write access in production.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get, list, create, update, delete) Any user can read, list, create, update, or delete messages.
     * @principle Open access for messages.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows public read access to the music catalog, but restricts write access.
     * @path /artifacts/Aura/catalog/{songId}
     * @allow (get, list) Any user can read and list catalog songs.
     * @deny (create, update, delete) No client-side write access to the catalog.
     * @principle Public read, restricted write.
     */
    match /artifacts/Aura/catalog/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}