/**
 * @file Firebase Security Rules for Aura Music App
 *
 * @core_philosophy This ruleset implements a role-based access control model with an emphasis on user-owned data and administrative privileges.
 *
 * @data_structure
 *  - `/admins/{userId}`: Documents indicating admin status.  Document ID is the user's UID.
 *  - `/artifacts/Aura/users/{userId}`:  User profile data.
 *  - `/artifacts/Aura/users/{userId}/songs/{songId}`: Songs specific to a user.
 *  - `/artifacts/Aura/songs/{songId}/messages/{messageId}`: Chat messages for a specific song.
 *  - `/artifacts/Aura/catalog/{songId}`: Public music catalog.
 *
 * @key_security_decisions
 *  - Admin role is checked by looking up a document in the `/admins` collection.
 *  - User data is primarily accessible only to the owning user.
 *  - Public catalog data is readable by anyone, but only modifiable by admins.
 *  - Listing of documents in `/admins` collection is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Admin role management.
     * @path /admins/{userId}
     * @allow (get) User with UID 'adminUserId' can get their own admin record if it exists.
     * @allow (create) User with UID 'adminUserId' can create their own admin record if it doesn't exist. This assumes an admin-creation backend process exists.
     * @allow (update) Not allowed through rules. Admin records should be managed via a backend process.
     * @allow (delete) Not allowed through rules. Admin records should be managed via a backend process.
     * @deny (get) User with UID 'otherUserId' cannot get the admin record of 'adminUserId'.
     * @deny (create) User with UID 'otherUserId' cannot create the admin record of 'adminUserId'.
     * @deny (update) Any user cannot update any admin record through client-side rules.
     * @deny (delete) Any user cannot delete any admin record through client-side rules.
     * @principle Enforces strict control over admin role assignments.
     */
    match /admins/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description User profile data.
     * @path /artifacts/Aura/users/{userId}
     * @allow (get) User with UID 'user123' can get their own profile data.
     * @allow (create) User with UID 'user123' can create their profile, but only if the document ID matches their UID.
     * @allow (update) User with UID 'user123' can update their own profile data.
     * @allow (delete) User with UID 'user123' can delete their own profile data.
     * @deny (get) User with UID 'otherUser' cannot get the profile data of 'user123'.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID.
     * @deny (update) User with UID 'otherUser' cannot update the profile data of 'user123'.
     * @deny (delete) User with UID 'otherUser' cannot delete the profile data of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /artifacts/Aura/users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description User-specific song library.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (get) User with UID 'user123' can get a song from their own library.
     * @allow (create) User with UID 'user123' can add a song to their own library.
     * @allow (update) User with UID 'user123' can update a song in their own library.
     * @allow (delete) User with UID 'user123' can delete a song from their own library.
     * @deny (get) User with UID 'otherUser' cannot get a song from 'user123''s library.
     * @deny (create) User with UID 'otherUser' cannot add a song to 'user123''s library.
     * @deny (update) User with UID 'otherUser' cannot update a song in 'user123''s library.
     * @deny (delete) User with UID 'otherUser' cannot delete a song from 'user123''s library.
     * @principle Restricts access to a user's own music library.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Chat messages for a specific song.
     * @path /artifacts/Aura/songs/{songId}/messages/{messageId}
     * @allow (get) Any user can read messages for a song.
     * @allow (create) Any signed-in user can create messages for a song.
     * @allow (update) Not allowed. Messages cannot be edited.
     * @allow (delete) Not allowed. Messages cannot be deleted.
     * @deny (update) No user can update any message through client-side rules.
     * @deny (delete) No user can delete any message through client-side rules.
     * @principle Allows public read access for chat messages, but restricts modification.
     */
    match /artifacts/Aura/songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Public music catalog, managed by admins.
     * @path /artifacts/Aura/catalog/{songId}
     * @allow (get) Any user can read the catalog.
     * @allow (list) Any user can list the catalog.
     * @allow (create) Only admins can add songs to the catalog.
     * @allow (update) Only admins can modify songs in the catalog.
     * @allow (delete) Only admins can remove songs from the catalog.
     * @deny (create) Regular users cannot add songs to the catalog.
     * @deny (update) Regular users cannot modify songs in the catalog.
     * @deny (delete) Regular users cannot remove songs from the catalog.
     * @principle Restricts write access to the public catalog to admins only.
     */
    match /artifacts/Aura/catalog/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data != null;
  }
}