/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to a global song catalog.  Private chat
 * sessions are secured to only allow access to participating users.  Data
 * validation is relaxed to enable rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}: User-created playlists, accessible only by the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist, accessible only by the owning user.
 * - /songs/{songId}: A global catalog of songs, publicly readable, writable only by the song's creator.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song, accessible to anyone.
 * - /users/{userId}/followers/{followerId}: List of followers for a user, accessible only by the owning user.
 * - /users/{userId}/following/{followingId}: List of users a user is following, accessible only by the owning user.
 * - /chats/{chatId}: Private chat sessions between users, accessible only to participants.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat session, accessible only to participants.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and associated playlists/songs.
 * - The global song catalog is publicly readable to allow discovery.
 * - Private chats are only accessible to participating users.
 * - Data schema validation is minimized for rapid prototyping.
 * - Listing of user documents is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (read) User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (read) User with ID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures playlists, allowing only the owner to read and write.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist in their profile if authenticated as 'user123'.
     * @allow (read) User with ID 'user123' can read a playlist in their profile if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update a playlist in their profile if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a playlist in their profile if authenticated as 'user123'.
     * @deny (read) User with ID 'user456' cannot read a playlist of user 'user123'.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures songs within a playlist, allowing only the owner to read and write.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with ID 'user123' can create a song in their playlist if authenticated as 'user123'.
     * @allow (read) User with ID 'user123' can read a song in their playlist if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update a song in their playlist if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a song in their playlist if authenticated as 'user123'.
     * @deny (read) User with ID 'user456' cannot read a song in the playlist of user 'user123'.
     * @principle Enforces document ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to songs, but restricts writes to the song's creator.
     * @path /songs/{songId}
     * @allow (get) Any user can read a song.
     * @allow (list) Any user can list songs.
     * @allow (create) User with ID 'user123' can create a song. The song document must have an 'ownerId' field equal to 'user123'.
     * @allow (update) User with ID 'user123' can update a song they own, where the existing document has 'ownerId' equal to 'user123'.
     * @allow (delete) User with ID 'user123' can delete a song they own, where the existing document has 'ownerId' equal to 'user123'.
     * @deny (create) User with ID 'user456' cannot create a song with 'ownerId' set to 'user123'.
     * @deny (update) User with ID 'user456' cannot update a song owned by user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a song owned by user 'user123'.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
        allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Allows anyone to read and write messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get) Any user can read a message for a song.
     * @allow (list) Any user can list messages for a song.
     * @allow (create) Any user can create a message for a song.
     * @allow (update) Any user can update a message for a song.
     * @allow (delete) Any user can delete a message for a song.
     * @principle Open access for song-related messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Secures the list of followers for a user, allowing only the owner to read and write.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) User with ID 'user123' can add a follower to their list if authenticated as 'user123'.
     * @allow (read) User with ID 'user123' can read their list of followers if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their list of followers if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a follower from their list if authenticated as 'user123'.
     * @deny (read) User with ID 'user456' cannot read the list of followers of user 'user123'.
     * @principle Enforces document ownership for follower lists.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the list of users a user is following, allowing only the owner to read and write.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) User with ID 'user123' can add a user to their following list if authenticated as 'user123'.
     * @allow (read) User with ID 'user123' can read their following list if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their following list if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a user from their following list if authenticated as 'user123'.
     * @deny (read) User with ID 'user456' cannot read the following list of user 'user123'.
     * @principle Enforces document ownership for following lists.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures private chat sessions, allowing access only to participating users.
     * @path /chats/{chatId}
     * @allow (create) User with ID 'user123' can create a chat if they are a participant.
     * @allow (read) User with ID 'user123' can read a chat if they are a participant.
     * @allow (update) User with ID 'user123' can update a chat if they are a participant.
     * @allow (delete) User with ID 'user123' can delete a chat if they are a participant.
     * @deny (read) User with ID 'user456' cannot read a chat they are not participating in.
     * @principle Enforces shared access for private chat sessions.
     */
    match /chats/{chatId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow list: if false; // Listing chats is generally not desirable for privacy
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Secures messages within a private chat session, allowing access only to participating users.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) User with ID 'user123' can create a message in a chat they are participating in.
     * @allow (read) User with ID 'user123' can read a message in a chat they are participating in.
     * @allow (update) User with ID 'user123' can update a message in a chat they are participating in.
     * @allow (delete) User with ID 'user123' can delete a message in a chat they are participating in.
     * @deny (read) User with ID 'user456' cannot read a message in a chat they are not participating in.
     * @principle Enforces shared access for chat messages within private chat sessions.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow list: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow delete: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}