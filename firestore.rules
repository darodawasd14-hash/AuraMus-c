/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and playlists,
 *              allows public access to the global song catalog, and restricts chat access to participants.
 *
 * @dataStructure
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a specific playlist.
 * - /songs/{songId}: A global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a specific song, publicly readable but writeable by authenticated users.
 * - /users/{userId}/followers/{followerId}: Users following a particular user.
 * - /users/{userId}/following/{followingId}: Users that a particular user is following.
 * - /chats/{chatId}: Private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data and playlists.
 * - The global song catalog is publicly readable, but only authenticated users can create, update, or delete songs.
 * - Chat messages for songs are publicly readable but only authenticated users can write them.
 * - Followers and Following lists are user-specific and only accessible by the user.
 * - Private chats are restricted to the participants.
 * - Listing of users is disallowed.
 *
 * @denormalizationForAuthorization
 * - For simplicity and performance, ownership is validated by comparing `request.auth.uid` to the `userId` in the path.
 *   This avoids the need for additional `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get, update, delete) User 'user123' can get, update and delete their own profile.
     * @deny (get, update, delete) User 'user456' cannot get, update, or delete 'user123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages playlists created by a user.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User 'user123' can create a playlist under their profile.
     * @deny (create) User 'user456' cannot create a playlist under 'user123' profile.
     * @allow (get, update, delete) User 'user123' can get, update, and delete their own playlists.
     * @deny (get, update, delete) User 'user456' cannot get, update, or delete 'user123' playlists.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User 'user123' can add a song to their playlist.
     * @deny (create) User 'user456' cannot add a song to 'user123' playlist.
     * @allow (get, update, delete) User 'user123' can get, update and delete songs in their playlist.
     * @deny (get, update, delete) User 'user456' cannot get, update or delete songs in 'user123' playlist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read the song catalog.
     * @allow (create, update, delete) Only authenticated users can create, update, and delete songs.
     * @deny (create, update, delete) Unauthenticated users cannot modify the song catalog.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Any user can read the chat messages.
     * @allow (create, update, delete) Only authenticated users can create, update, and delete messages.
     * @deny (create, update, delete) Unauthenticated users cannot modify the chat messages.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list, create, update, delete) Only the user can manage their followers.
     * @deny (get, list, create, update, delete) Other users cannot manage the followers of a user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list, create, update, delete) Only the user can manage who they are following.
     * @deny (get, list, create, update, delete) Other users cannot manage who a user is following.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages private chat rooms between users.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can read the chat room.
     * @allow (create) Only participants can create a chat room.
     * @allow (update, delete) No one can update or delete a chat room.
     * @deny (get, list, create) Non-participants cannot access the chat room.
     * @principle Enforces shared access between collaborators.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }
      allow get: if isParticipant();
      allow list: if isSignedIn(); // Assuming listing is allowed for signed-in users
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list, create) Only participants can read and create messages.
     * @allow (update, delete) No one can update or delete messages.
     * @deny (get, list, create) Non-participants cannot access the messages.
     * @principle Enforces shared access between collaborators.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
     function isChatParticipant() {
         return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
      allow get: if isSignedIn() && isChatParticipant().data.participantIds.hasAny([request.auth.uid]);
      allow list: if isSignedIn() && isChatParticipant().data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && isChatParticipant().data.participantIds.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if false;
    }
  }
}