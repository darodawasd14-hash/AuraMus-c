/**
 * @fileOverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model where users primarily have access to their own data. Public read access is granted to some collections, but writes are generally restricted to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/playlists/{playlistId}: Stores user-created playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a playlist.
 * - /songs/{songId}: Global catalog of songs added by users.
 * - /songs/{songId}/messages/{messageId}: Chat messages for songs.
 * - /users/{userId}/followers/{followerId}: List of followers for a user.
 * - /users/{userId}/following/{followingId}: List of users a user is following.
 *
 * Key Security Decisions:
 * - Users can read other user profiles.
 * - Users can only modify their own profile data.
 * - Playlists are private to the user.
 * - Songs are public.
 * - Followers/Following lists are publicly readable, but only the user can modify their own following list.
 *
 * Denormalization for Authorization:
 * - The `Playlist` entity includes a `userId` field, which is crucial for enforcing ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (read) Any authenticated user can read profile information.
     * @allow (write) User can only update their own profile.
     * @deny (write) User cannot update another user's profile.
     * @principle Enforces user-ownership for writes.
     */
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      
      /**
       * @description Rules for user playlists.
       * @path /users/{userId}/playlists/{playlistId}
       * @allow (create) User can create playlists under their own user ID.
       * @allow (read) Any authenticated user can read playlists.
       * @deny (create) User cannot create playlists under another user's ID.
       * @principle Enforces document ownership for writes, authenticated read for public playlists.
       */
      match /playlists/{playlistId} {
        allow read: if isSignedIn();
        allow create: if request.auth.uid == userId;
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);

        /**
         * @description Rules for songs within a playlist.
         * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
         * @allow (create) User can add songs to their own playlists.
         * @allow (read) Any authenticated user can read songs in playlists.
         * @deny (create) User cannot add songs to another user's playlists.
         * @principle Enforces ownership and authenticated read access.
         */
        match /songs/{songId} {
          allow read: if isSignedIn();
          allow create: if request.auth.uid == userId;
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
      }

      /**
       * @description Rules for followers.
       * @path /users/{userId}/followers/{followerId}
       * @allow (read) Any authenticated user can read followers.
       * @allow (create) A user can add themselves as a follower.
       * @deny (update) Updates are not allowed.
       * @principle Allows users to follow each other.
       */
      match /followers/{followerId} {
        allow read: if isSignedIn();
        allow create: if request.auth.uid == followerId;
        allow update: if false;
        allow delete: if request.auth.uid == followerId;
      }

      /**
       * @description Rules for following.
       * @path /users/{userId}/following/{followingId}
       * @allow (read) Any authenticated user can read following list.
       * @allow (create) Only the user can add to their own following list.
       * @deny (update) Updates are not allowed.
       * @principle Allows users to manage their own following list.
       */
      match /following/{followingId} {
        allow read: if isSignedIn();
        allow create: if request.auth.uid == userId;
        allow update: if false;
        allow delete: if request.auth.uid == userId;
      }
    }

    /**
     * @description Rules for songs (global catalog).
     * @path /songs/{songId}
     * @allow (get, list) Any user can read song data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Song' entity is missing an 'ownerId' or 'authorId' field.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

      /**
       * @description Rules for messages associated with a song.
       * @path /songs/{songId}/messages/{messageId}
       * @allow (create) Any authenticated user can create a message.
       * @allow (read) Any authenticated user can read messages.
       * @deny (update, delete) Messages cannot be updated or deleted.
       * @principle Allows open messaging on songs.
       */
      match /messages/{messageId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to check against.
   * @returns {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the resource and the resource exists.
   * @param {string} userId The user ID to check against.
   * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}