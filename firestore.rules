/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, while allowing public read access to shared content.
 * User data and playlists are protected, while songs and messages can be read by anyone.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owner.
 * - /users/{userId}/playlists/{playlistId}: User playlists, accessible only to the owner.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs in a playlist, accessible only to the owner.
 * - /songs/{songId}: Public song catalog, readable by anyone, writeable only with proper ownership.
 * - /songs/{songId}/messages/{messageId}: Chat messages for songs, readable by anyone, writeable only by authenticated users.
 * - /users/{userId}/followers/{followerId}: Follower relationships, accessible only to the owner.
 * - /users/{userId}/following/{followingId}: Following relationships, accessible only to the owner.
 * - /chats/{chatId}: Chat sessions between users, accessible only to participants.
 * - /chats/{chatId}/messages/{messageId}: Chat messages, accessible only to participants.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data and playlists.
 * - Listing all users is disallowed.
 * - Songs are publically readable but can only be created or modified with correct ownership.
 * - Chat messages are readable by chat participants only.
 *
 * Denormalization for Authorization:
 * - Enforces `userId` on playlists, songs under playlists, follower entries, and following entries to match the parent `userId` in the path. This avoids costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can read/write their own profile.
     * @deny (create) - User cannot create a profile for another user.
     * @deny (get, update, delete) - User cannot read/write another user's profile.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isExistingOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User can create playlists under their own profile.
     * @allow (get, list, update, delete) - User can read/write their own playlists.
     * @deny (create) - User cannot create playlists for another user.
     * @deny (get, list, update, delete) - User cannot read/write another user's playlists.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - User can add songs to their own playlist.
     * @allow (get, list, update, delete) - User can read/write songs in their own playlist.
     * @deny (create) - User cannot add songs to another user's playlist.
     * @deny (get, list, update, delete) - User cannot read/write songs in another user's playlist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Anyone can read the song catalog.
     * @allow (create) - Only authenticated users can add songs. The `authorId` field MUST match the user's UID.
     * @allow (update, delete) - Only the owner can update/delete a song.
     * @deny (create) - If the `authorId` field does not match the user's UID.
     * @deny (update, delete) - If the user is not the owner of the song.
     * @principle Allows public read with owner-only writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if request.auth != null && resource != null;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Anyone can read the chat messages.
     * @allow (create) - Only authenticated users can send messages.
     * @deny (create, update, delete) - Only authenticated users can write messages.
     * @principle Allows public read, authenticated write.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to follower relationships for a user.
      * @path /users/{userId}/followers/{followerId}
      * @allow (create) - User can add a follower to their list.
      * @allow (get, list, update, delete) - User can read/write their own follower list.
      * @deny (create) - User cannot create follower relationships for another user.
      * @deny (get, list, update, delete) - User cannot read/write another user's follower list.
      * @principle Enforces document ownership.
      */
    match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId);
        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Controls access to following relationships for a user.
       * @path /users/{userId}/following/{followingId}
       * @allow (create) - User can add to their following list.
       * @allow (get, list, update, delete) - User can read/write their own following list.
       * @deny (create) - User cannot create following relationships for another user.
       * @deny (get, list, update, delete) - User cannot read/write another user's following list.
       * @principle Enforces document ownership.
       */
    match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }
        allow create: if isOwner(userId);
        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

       /**
        * @description Controls access to private chat sessions between users.
        * @path /chats/{chatId}
        * @allow (create) - Only authenticated users can create a chat. The `participantIds` field MUST include the user's UID.
        * @allow (get, list) - Only participants can read the chat data.
        * @allow (update) - Only participants can update the chat data (e.g., last message).
        * @allow (delete) - No one can delete a chat except with server admin permissions.
        * @deny (create) - If the `participantIds` field does not include the user's UID.
        * @deny (get, list) - If the user is not a participant in the chat.
        * @principle Enforces shared access between collaborators.
        */
    match /chats/{chatId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant() {
          return isSignedIn() && request.auth.uid in resource.data.participantIds;
        }

        allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
        allow get, list: if isParticipant();
        allow update: if isParticipant() && resource != null;
        allow delete: if false;
      }

      /**
       * @description Controls access to messages within a private chat session.
       * @path /chats/{chatId}/messages/{messageId}
       * @allow (create) - Only participants of the chat can create messages.
       * @allow (get, list) - Only participants of the chat can read messages.
       * @allow (update, delete) - No one can update or delete messages (messages are immutable).
       * @deny (create) - If the user is not a participant in the chat.
       * @deny (get, list) - If the user is not a participant in the chat.
       * @principle Enforces shared access between collaborators.
       */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function getChat(chatId) {
          return get(/databases/$(database)/documents/chats/$(chatId));
        }

        function isParticipant(chatId) {
          return isSignedIn() && getChat(chatId).data.participantIds.hasAny([request.auth.uid]);
        }

        allow create: if isParticipant(chatId);
        allow get, list: if isParticipant(chatId);
        allow update: if false;
        allow delete: if false;
      }
  }
}