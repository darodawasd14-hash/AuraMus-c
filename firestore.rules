/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Users can read profile data of other users. Users can read playlists of other users.
 * Users can only modify their own profile data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists created by each user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs within a playlist.
 * - /songs/{songId}: A global catalog of songs added by users.
 * - /songs/{songId}/messages/{messageId}: Chat messages for each song.
 * - /users/{userId}/followers/{followerId}: Followers of a user.
 * - /users/{userId}/following/{followingId}: Users a user is following.
 *
 * Key Security Decisions:
 * - Users can read each other's profiles.
 * - Users can only write to their own profile document.
 * - Users can read each other's playlists.
 *
 * Denormalization for Authorization:
 * - The `Playlist` entity includes a `userId` field to indicate playlist ownership,
 *   allowing the rules to verify that a user creating/modifying a playlist is the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (read) Any signed-in user can read any user's profile.
     * @allow (create) A user can create their own profile if the userId matches their auth UID.
     * @allow (update) A user can update their own profile if the userId matches their auth UID.
     * @deny (delete) Users cannot delete their profile documents.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (update) A user cannot update another user's profile.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Rules for playlists belonging to a user.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read) Any signed-in user can read any user's playlist.
     * @allow (create) A user can create a playlist under their own user ID.
     * @allow (update) A user can update a playlist under their own user ID, validating ownership.
     * @allow (delete) A user can delete a playlist under their own user ID, validating ownership.
     * @deny (create) A user cannot create a playlist for another user.
     * @deny (update) A user cannot update another user's playlist.
     * @deny (delete) A user cannot delete another user's playlist.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

        /**
         * @description Rules for songs within a user's playlist.
         * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
         * @allow (read) Any signed-in user can read songs in any user's playlist.
         * @allow (create) A user can add a song to their own playlist.
         * @allow (update) A user can update a song in their own playlist.
         * @allow (delete) A user can delete a song from their own playlist.
         * @deny (create) A user cannot add a song to another user's playlist.
         * @deny (update) A user cannot update a song in another user's playlist.
         * @deny (delete) A user cannot delete a song from another user's playlist.
         * @principle Enforces document ownership for writes; allows public reads.
         */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == request.auth.uid;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the global songs collection.
     * @path /songs/{songId}
     * @allow (read) Anyone can read any song.
     * @allow (create) Any signed-in user can add a song.
     * @allow (update) No one can update a song.
     * @allow (delete) No one can delete a song.
     * @principle Allows public reads and signed-in user writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for messages associated with a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read) Anyone can read messages for any song.
     * @allow (create) Any signed-in user can create a message.
     * @allow (update) No one can update a message.
     * @allow (delete) No one can delete a message.
     * @principle Allows public reads and signed-in user writes.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (read) Any signed-in user can list followers of any user.
     * @allow (create) No one can create a follower document.
     * @allow (update) No one can update a follower document.
     * @allow (delete) No one can delete a follower document.
     * @principle Allows public reads.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Rules for users a user is following.
      * @path /users/{userId}/following/{followingId}
      * @allow (read) Any signed-in user can list who a user is following.
      * @allow (create) No one can create a following document.
      * @allow (update) No one can update a following document.
      * @allow (delete) No one can delete a following document.
      * @principle Allows public reads.
      */
    match /users/{userId}/following/{followingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}