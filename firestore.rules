/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring that users can only access their own resources.
 * Public read access is granted to specific collections to allow for global content discovery.
 * Data consistency between document paths and internal fields is enforced.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/playlists/{playlistId}: Playlists owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist.
 * - /songs/{songId}: Public catalog of songs added by users.
 * - /songs/{songId}/messages/{messageId}: Chat messages for each song.
 * - /users/{userId}/followers/{followerId}: Users following a given user
 * - /users/{userId}/following/{followingId}: Users a given user is following
 * - /chats/{chatId}: Private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect privacy.
 * - Public read access is granted to the /songs collection for content discovery.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `userId` field in the `Playlist` entity is used for authorization, avoiding the need for additional `get()` calls.
 * - The `participantIds` field in the `Chat` entity is used for authorization, allowing users to read and write messages in chats they are a part of.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete): User with UID 'user123' can create/update/delete their profile at /users/user123 if the 'id' field matches.
     * @allow (get): User with UID 'user123' can get their profile at /users/user123.
     * @deny (create, update, delete): User with UID 'user456' cannot modify user 'user123' profile at /users/user123.
     * @deny (list): Listing all users is prohibited.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures user playlists, allowing only the owner to read and write.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, update, delete): User 'user123' can create/update/delete playlist 'playlist456' under /users/user123/playlists/playlist456.
     * @allow (get, list): User 'user123' can get/list playlists under /users/user123/playlists/.
     * @deny (create, update, delete): User 'user456' cannot modify playlists under /users/user123/playlists/.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures songs within a user's playlist, allowing only the playlist owner to manage them.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, update, delete): User 'user123' can create/update/delete song 'song789' in playlist 'playlist456' under /users/user123/playlists/playlist456/songs/song789.
     * @allow (get, list): User 'user123' can get/list songs in playlist 'playlist456' under /users/user123/playlists/playlist456/songs/.
     * @deny (create, update, delete): User 'user456' cannot modify songs in playlists under /users/user123/playlists/.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Provides public read access to songs while restricting write access to authenticated users.
     * @path /songs/{songId}
     * @allow (get, list): Any user (including unauthenticated) can retrieve/list song details.
     * @allow (create): Only authenticated user can create a song
     * @allow (update, delete): Only the user who create the song can update and delete it
     * @deny (create): Unauthenticated user cannot create a song
     * @principle Allows public reads with owner-only writes.
     */
    match /songs/{songId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn() && resource != null;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures chat messages for a specific song, allowing any authenticated user to create messages.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create): Any authenticated user can create a message.
     * @allow (get, list): Any user can get and list the messages
     * @deny (update, delete): No users are allowed to update or delete any message
     * @principle Allows public reads with open writes for authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the list of followers for a user, allowing only the user to manage their followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create, update, delete): User 'user123' can create/update/delete follower 'follower456' under /users/user123/followers/follower456.
     * @allow (get, list): User 'user123' can get/list followers under /users/user123/followers/.
     * @deny (create, update, delete): User 'user456' cannot modify followers under /users/user123/followers/.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/followers/{followerId} {
       function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the list of users a user is following, allowing only the user to manage their following list.
     * @path /users/{userId}/following/{followingId}
     * @allow (create, update, delete): User 'user123' can create/update/delete following 'following456' under /users/user123/following/following456.
     * @allow (get, list): User 'user123' can get/list following under /users/user123/following/.
     * @deny (create, update, delete): User 'user456' cannot modify following under /users/user123/following/.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/following/{followingId} {
       function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures private chat rooms, allowing only participants to read and write.
     * @path /chats/{chatId}
     * @allow (create): Any authenticated user can create chat room
     * @allow (get, list): Participants user can get and list the chat messages
     * @allow (update, delete): No users are allowed to update or delete any message
     * @principle Allows shared access for collaborators.
     */
    match /chats/{chatId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isParticipant() {
          return request.auth != null && request.resource.data.participantIds.hasAny([request.auth.uid]);
        }

        allow get, list: if isSignedIn() && isParticipant();
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Secures messages within a private chat room, allowing only chat participants to manage them.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create): Participant user can create a message
     * @allow (get, list): Participants user can get and list the chat messages
     * @deny (update, delete): No users are allowed to update or delete any message
     * @principle Allows shared access for collaborators.
     */
    match /chats/{chatId}/messages/{messageId} {
       function isParticipant(chatId) {
          return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        }

        allow get, list: if request.auth != null && isParticipant(chatId);
        allow create: if request.auth != null && isParticipant(chatId);
        allow update: if false;
        allow delete: if false;
    }
  }
}