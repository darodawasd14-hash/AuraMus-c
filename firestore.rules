/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model with some public read access.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}: Playlists owned by a specific user, accessible only to the owning user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist, accessible only to the owning user.
 * - /songs/{songId}: Public catalog of songs, readable by everyone, writable only by the owner (creator).
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song, accessible to all users.
 * - /users/{userId}/followers/{followerId}: List of followers for a user, accessible to signed-in users.
 * - /users/{userId}/following/{followingId}: List of users a user is following, accessible to signed-in users.
 * - /chats/{chatId}: Private chat rooms between users, access controlled by participant list.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room, access controlled by participant list.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data and playlists.
 * - The global song catalog is publicly readable, but only the song creator can modify a song.
 * - Listing of user documents is disallowed.
 * - Followers and Following lists are visible to all signed-in users.
 * - Private chats are only accessible to participants.
 *
 * Denormalization for Authorization:
 * - Songs need an `ownerId` field to enforce owner-only writes in the `/songs` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist under their profile.
     * @allow (get) User with ID 'user123' can read a playlist under their profile.
     * @allow (update) User with ID 'user123' can update a playlist under their profile.
     * @allow (delete) User with ID 'user123' can delete a playlist under their profile.
     * @deny (create) User with ID 'user456' cannot create a playlist for 'user123'.
     * @deny (get) User with ID 'user456' cannot read playlists for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with ID 'user123' can add a song to their playlist.
     * @allow (get) User with ID 'user123' can read a song in their playlist.
     * @allow (update) User with ID 'user123' can update a song in their playlist.
     * @allow (delete) User with ID 'user123' can delete a song from their playlist.
     * @deny (create) User with ID 'user456' cannot add a song to 'user123's playlist.
     * @deny (get) User with ID 'user456' cannot read songs from 'user123's playlist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) Any user can read song data.
     * @allow (list) Any user can list songs.
     * @allow (create) User with ID 'user123' can create a song. Requires 'ownerId' in the song data.
     * @allow (update) User with ID 'user123' can update a song if they are the owner (ownerId matches).
     * @allow (delete) User with ID 'user123' can delete a song if they are the owner.
     * @deny (create) if the `ownerId` field is missing.
     * @deny (update) if the user is not the owner of the song.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid; //CRITICAL: ownerId needs to be present in schema
      allow update: if isExistingOwner(resource.data.ownerId); //CRITICAL: ownerId needs to be present in schema
      allow delete: if isExistingOwner(resource.data.ownerId); //CRITICAL: ownerId needs to be present in schema
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get) Any user can read a message.
     * @allow (update) No one can update a message.
     * @allow (delete) No one can delete a message.
     * @principle Allows public read and create access, but no updates or deletes.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get) Any signed-in user can read a follower.
     * @allow (list) Any signed-in user can list followers.
     * @allow (create) User can add a follower to their list.
     * @allow (update) User can update a follower in their list.
     * @allow (delete) User can delete a follower from their list.
     * @principle Allows signed-in users to see who follows whom.
     */
    match /users/{userId}/followers/{followerId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get) Any signed-in user can read who a user is following.
     * @allow (list) Any signed-in user can list who a user is following.
     * @allow (create) User can add to their following list.
     * @allow (update) User can update their following list.
     * @allow (delete) User can delete from their following list.
     * @principle Allows signed-in users to see who is following whom.
     */
    match /users/{userId}/following/{followingId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to private chat rooms between users.
     * @path /chats/{chatId}
     * @allow (get) Only participants can read chat room data.
     * @allow (list) No listing of chats is allowed.
     * @allow (create) Any signed-in user can create a chat.
     * @allow (update) Only participants can update chat room data.
     * @allow (delete) Only participants can delete a chat room.
     * @principle Restricts access to chat participants.
     */
    match /chats/{chatId} {
        allow get: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get) Only participants can read chat messages.
     * @allow (list) Only participants can list messages.
     * @allow (create) Only participants can create a message.
     * @allow (update) No one can update a message.
     * @allow (delete) No one can delete a message.
     * @principle Restricts access to chat participants.
     */
    match /chats/{chatId}/messages/{messageId} {
        allow get, list: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow update: if false;
        allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}