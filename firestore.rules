rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create a playlist under their profile.
     * @allow (get) User with ID 'user123' can read a playlist under their profile.
     * @allow (update) User with ID 'user123' can update a playlist under their profile.
     * @allow (delete) User with ID 'user123' can delete a playlist under their profile.
     * @deny (create) User with ID 'user456' cannot create a playlist under user 'user123'.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with ID 'user123' can create a song in their playlist.
     * @allow (get) User with ID 'user123' can read a song in their playlist.
     * @allow (update) User with ID 'user123' can update a song in their playlist.
     * @allow (delete) User with ID 'user123' can delete a song in their playlist.
     * @deny (create) User with ID 'user456' cannot create a song in user 'user123's playlist.
     * @principle Enforces document ownership for playlist songs.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get) Any user can read a song.
     * @allow (list) Any user can list songs.
     * @allow (create) Only the song's owner can create it.
     * @allow (update) Only the song's owner can update it, and the document must exist.
     * @allow (delete) Only the song's owner can delete it, and the document must exist.
     * @deny (create) User cannot create if the authorId does not match their uid.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /songs/{songId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && exists(resource);
        allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message for a song.
     * @allow (get) Any signed-in user can read a message for a song.
     * @allow (update) Any signed-in user can update a message for a song, and the document must exist.
     * @allow (delete) Any signed-in user can delete a message for a song, and the document must exist.
     * @principle Allows open access for chat messages.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) A user can create a follower entry.
     * @allow (get) A user can get their followers.
     * @allow (update) A user can update their follower list.
     * @allow (delete) A user can delete a follower from their list.
     * @principle Enforces document ownership for followers.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) A user can create a following entry.
     * @allow (get) A user can get their following list.
     * @allow (update) A user can update their following list.
     * @allow (delete) A user can delete a user from their following list.
     * @principle Enforces document ownership for following list.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if request.auth.uid == userId;
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Controls access to private chat rooms between users.
     * @path /chats/{chatId}
     *
     * @allow (get) Any signed-in user who is a participant in the chat can read the chat.
     * @allow (list) Only allow listing chats where the query includes 'participantIds' and 'array-contains' the user's ID.
     * @allow (create) Any signed-in user who is a participant in the chat can create the chat.
     * @allow (update) Any signed-in user who is a participant in the chat, and the document must exist.
     * @allow (delete) Any signed-in user who is a participant in the chat, and the document must exist.
     * @principle Restricts chat access to participants only.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && isChatParticipant(resource.data.participantIds);
        // LİSTELEME SORGUSU (Hatanın olduğu yer)
        // Sadece 'participantIds' alanında 'array-contains' SORGUSUNA izin ver.
      allow list: if isSignedIn()
                    && request.query.keys().hasAll(['participantIds'])
                    && request.query.participantIds is list
                    && request.query.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && isChatParticipant(request.resource.data.participantIds);
      allow update: if isSignedIn() && isChatParticipant(resource.data.participantIds) && exists(resource);
      allow delete: if isSignedIn() && isChatParticipant(resource.data.participantIds) && exists(resource);
    }

    /**
     * @description Controls access to messages within a specific chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) Any signed-in user who is a participant in the chat can create a message.
     * @allow (get) Any signed-in user who is a participant in the chat can read a message.
     * @allow (update) Any signed-in user can update a message for a song, and the document must exist.
     * @allow (delete) Any signed-in user can delete a message for a song, and the document must exist.
     * @principle Restricts message access to participants of the chat.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow list: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow create: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds);
      allow update: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds) && exists(resource);
      allow delete: if isSignedIn() && isChatParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds) && exists(resource);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data != null;
  }

  function isChatParticipant(participantIds) {
    return isSignedIn() && participantIds.hasAny([request.auth.uid]);
  }
}