/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, user-centric data model. Users have full control over their profile data and playlists.
 * Public data (songs) is readable by everyone but writable only by authorized users. Private chats enforce mutual participation.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a specific playlist.
 * - /songs/{songId}: Public catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song (public context).
 * - /users/{userId}/followers/{followerId}: Users following a specific user.
 * - /users/{userId}/following/{followingId}: Users a specific user is following.
 * - /chats/{chatId}: Represents a private chat room between two or more users, chatId is uid1_uid2
 * - /chats/{chatId}/messages/{messageId}: Stores the messages for a specific private chat room.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and playlists.
 * - Public song data is readable by everyone.
 * - Listing all users is disallowed.
 * - Private chats are only accessible to participants.
 *
 * Denormalization for Authorization:
 * - Chat security relies on the chatId being composed of the two user ids involved (uid1_uid2)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (update, delete) - User with UID 'user456' cannot update/delete 'user123' profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces playlist ownership within a user's profile.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User with UID 'user123' can create a playlist in their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, list, update, delete) - User with UID 'user123' can manage their own playlists.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) - User with UID 'user456' cannot create a playlist for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update, delete) - User with UID 'user456' cannot modify 'user123' playlists.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Restricts playlist access to the owning user.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces song ownership within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - User with UID 'user123' can add a song to their playlist.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) - User with UID 'user123' can manage songs in their playlist.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with UID 'user456' cannot add a song to 'user123' playlist.
     *   - request.auth.uid: 'user456'
     * @deny (update, delete) - User with UID 'user456' cannot modify songs in 'user123' playlists.
     *   - request.auth.uid: 'user456'
     * @principle Restricts song management to the playlist owner.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to song data, but restricts creation and modification.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read the song data.
     * @allow (create, update, delete) - No one can create, update or delete songs.
     * @principle Provides public read access while restricting write access.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to chat messages for a song, but restricts creation and modification.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Any user can read the chat messages.
     * @allow (create, update, delete) - No one can create, update or delete messages.
     * @principle Provides public read access while restricting write access.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for follower relationships.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) - The user can view their followers.
     *   - request.auth.uid: 'user123'
     * @allow (create) - User with UID 'user456' can follow user with UID 'user123'.
     *   - request.auth.uid: 'user456'
     *   - followerId: 'user456'
     * @allow (delete) - User with UID 'user456' can unfollow user with UID 'user123'.
     *   - request.auth.uid: 'user456'
     *   - followerId: 'user456'
     * @deny (update) - No one can update follower relationship.
     * @principle Restricts access to the owning user.
     */
     match /users/{userId}/followers/{followerId} {
        allow get, list: if isOwner(userId);
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if isSignedIn();
     }

    /**
     * @description Enforces ownership for following relationships.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) - The user can view who they are following.
     *   - request.auth.uid: 'user123'
     * @allow (create) - User with UID 'user123' can follow user with UID 'user456'.
     *   - request.auth.uid: 'user123'
     *   - userId: 'user123'
     * @allow (delete) - User with UID 'user123' can unfollow user with UID 'user456'.
     *   - request.auth.uid: 'user123'
     *   - userId: 'user123'
     * @deny (update) - No one can update following relationship.
     * @principle Restricts access to the owning user.
     */
    match /users/{userId}/following/{followingId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for private chat rooms based on participant IDs derived from the chatId.
     * @path /chats/{chatId}
     * @allow (read, write) - Only users whose UIDs are present in the chatId (split by '_') can read and write.
     * @principle Restricts access to chat participants.
     */
    match /chats/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
    }

    /**
     * @description Enforces access control for messages within a private chat room based on participant IDs derived from the chatId.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) - Only users whose UIDs are present in the chatId (split by '_') can read and write.
     * @principle Restricts access to chat participants.
     */
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
    }
  }
}