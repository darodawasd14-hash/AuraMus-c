/**
 * @fileoverview Firestore Security Rules for the Aura music application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only read and write their own data.
 *
 * Data Structure:
 * - /artifacts/Aura/users/{userId}: Stores user profiles.
 * - /artifacts/Aura/users/{userId}/songs/{songId}: Stores songs owned by a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own user profile.
 * - Users can only access songs they have added to their library.
 * - No public listing of users is allowed.
 * - Data validation is relaxed to facilitate prototyping and rapid iteration, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /artifacts/Aura/users/{userId}
     * @allow (get, create, update, delete) User with matching ID can perform the operation.
     * @deny (get, create, update, delete) User with non-matching ID attempts to perform the operation.
     * @principle Enforces user-ownership for accessing user profiles.
     */
    match /artifacts/Aura/users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        
      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to read their profile if they are the owner.
      allow get: if isOwner(userId);

      // Allow a user to update their profile if they are the owner and the userId is immutable.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;

      // Allow a user to delete their profile if they are the owner.
      allow delete: if isOwner(userId) && resource != null;

      // Do not allow listing of user profiles.
      allow list: if false;
    }

    /**
     * @description Secure user-specific songs. Only the owner can create, read, update, or delete songs in their library.
     * @path /artifacts/Aura/users/{userId}/songs/{songId}
     * @allow (create) User with matching userId can create a song in their own library.
     * @allow (get, list) User with matching userId can read a song from their library.
     * @allow (update, delete) User with matching userId can update/delete a song in their own library.
     * @deny (create, get, list, update, delete) User with non-matching userId attempts to access the song.
     * @principle Enforces user-ownership for accessing user songs.
     */
    match /artifacts/Aura/users/{userId}/songs/{songId} {
      // Helper function to check if the authenticated user is the owner of the song.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create a song in their own library.
      allow create: if isOwner(userId);

      // Allow a user to get a song from their own library.
      allow get: if isOwner(userId);

      // Allow a user to list songs from their own library.
      allow list: if isOwner(userId);

      // Helper function to check if the authenticated user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to update a song in their own library.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete a song from their own library.
      allow delete: if isExistingOwner(userId);
    }
  }
}