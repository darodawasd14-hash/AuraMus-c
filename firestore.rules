/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and playlists,
 *              allows public read access to songs, and restricts message creation to authenticated
 *              users who are the sender of the message.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /users/{userId}/playlist/{songId}: Stores a user's playlist, accessible only to the user.
 * - /songs/{songId}: Stores a global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for a song. Only authenticated users can create messages.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile and playlist data.
 * - The global song catalog is publicly readable.
 * - Listing users is disallowed.
 * - Only authenticated users can create messages for a song, and the `uid` field in the message must match their own `uid`.
 *
 * @denormalizationForAuthorization
 * - The `Message` schema requires a `sender.uid` field, which must match the authenticated user's `uid` on creation.
 *   This ensures that a user can only create messages under their own identity.
 *
 * @structuralSegregation
 * - The `songs` collection is public, while the `playlist` subcollection under `users` is private,
 *   allowing for different access controls for global vs. user-specific content.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - Authenticated user cannot create a profile with a different user ID.
     * @deny (get, update, delete) - Authenticated user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user playlists.
     * @path /users/{userId}/playlist/{playlistItemId}
     * @allow (create, get, update, delete, list) - Authenticated user can manage their own playlist items.
     * @deny (create, get, update, delete, list) - Authenticated user cannot manage another user's playlist items.
     * @principle Enforces document ownership for user playlists.
     */
    match /users/{userId}/playlist/{playlistItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for songs.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read and list songs.
     * @deny (create, update, delete) - Only the owner (creator) of the song can modify it, but the ownership field is missing.
     * @principle Allows public read access to songs; owner-only writes are intended but cannot be implemented.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Song' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Rule for messages within a song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read, list) - Any authenticated user can read and list messages for a song.
     * @allow (create) - Only authenticated users can create messages, and the `uid` field in the message must match their own `uid`.
     * @deny (update, delete) - No user can update or delete messages.
     * @principle Restricts message creation to authenticated users who are the sender of the message.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.sender.uid == request.auth.uid;
      allow update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}