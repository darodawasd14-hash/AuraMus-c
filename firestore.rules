rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request: auth.uid == 'user123', request.resource.data.id == 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   Request: auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   Request: auth.uid == 'user123', resource.data.id == 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   Request: auth.uid == 'user123', resource.data.id == 'user123'
     * @deny (create) User with ID 'user456' cannot create profile for 'user123'.
     *   Request: auth.uid == 'user456', request.resource.data.id == 'user123'
     * @deny (get) User with ID 'user456' cannot read profile for 'user123'.
     *   Request: auth.uid == 'user456'
     * @deny (update) User with ID 'user456' cannot update profile for 'user123'.
     *   Request: auth.uid == 'user456', resource.data.id == 'user123'
     * @deny (delete) User with ID 'user456' cannot delete profile for 'user123'.
     *   Request: auth.uid == 'user456', resource.data.id == 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create playlist.
     *   Request: auth.uid == 'user123', request.resource.data.userId == 'user123'
     * @allow (get) User with ID 'user123' can read their playlist.
     *   Request: auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their playlist.
     *   Request: auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their playlist.
     *   Request: auth.uid == 'user123', resource.data.userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete their playlist.
     *   Request: auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create playlist for user 'user123'.
     *   Request: auth.uid == 'user456', request.resource.data.userId == 'user123'
     * @deny (get) User with ID 'user456' cannot read playlist for user 'user123'.
     *   Request: auth.uid == 'user456'
     * @deny (update) User with ID 'user456' cannot update playlist for user 'user123'.
     *   Request: auth.uid == 'user456', resource.data.userId == 'user123'
     * @deny (delete) User with ID 'user456' cannot delete playlist for user 'user123'.
     *   Request: auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Stores songs for a specific playlist.
      * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
      * @allow (create) User with ID 'user123' can create a song in their playlist.
      *   Request: auth.uid == 'user123'
      * @allow (get) User with ID 'user123' can read a song in their playlist.
      *   Request: auth.uid == 'user123'
      * @allow (list) User with ID 'user123' can list songs in their playlist.
      *   Request: auth.uid == 'user123'
      * @allow (update) User with ID 'user123' can update a song in their playlist.
      *   Request: auth.uid == 'user123'
      * @allow (delete) User with ID 'user123' can delete a song in their playlist.
      *   Request: auth.uid == 'user123'
      * @deny (create) User with ID 'user456' cannot create a song in playlist of 'user123'.
      *   Request: auth.uid == 'user456'
      * @deny (get) User with ID 'user456' cannot read a song in playlist of 'user123'.
      *   Request: auth.uid == 'user456'
      * @deny (update) User with ID 'user456' cannot update a song in playlist of 'user123'.
      *   Request: auth.uid == 'user456'
      * @deny (delete) User with ID 'user456' cannot delete a song in playlist of 'user123'.
      *   Request: auth.uid == 'user456'
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores a global catalog of songs.
     * @path /songs/{songId}
     * @allow (get) Any user can read any song.
     *   Request: No auth needed
     * @allow (list) Any user can list songs.
     *   Request: No auth needed
     * @deny (create) No one can create songs in the top-level 'songs' collection.
     *   Request: No auth needed
     * @deny (update) No one can update songs in the top-level 'songs' collection.
     *   Request: No auth needed
     * @deny (delete) No one can delete songs in the top-level 'songs' collection.
     *   Request: No auth needed
     * @principle Public read access with no write access to the songs collection.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) Any user can create message for song.
     *   Request: No auth needed
     * @allow (get) Any user can get message for song.
     *   Request: No auth needed
     * @allow (list) Any user can list messages for song.
     *    Request: No auth needed
     * @deny (update) No one can update message for song.
     *   Request: No auth needed
     * @deny (delete) No one can delete message for song.
     *   Request: No auth needed
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores the followers of a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get) Any user can read the followers of any user.
     *   Request: No auth needed
     * @allow (list) Any user can list the followers of any user.
     *   Request: No auth needed
     * @allow (create) Any user can create the followers of any user.
     *   Request: No auth needed
     * @allow (update) No one can update the followers of any user.
     *   Request: No auth needed
     * @allow (delete) No one can delete the followers of any user.
     *   Request: No auth needed
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores the users that a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get) Any user can read the followings of any user.
     *   Request: No auth needed
     * @allow (list) Any user can list the followings of any user.
     *   Request: No auth needed
     * @allow (create) Any user can create the followings of any user.
     *   Request: No auth needed
     * @allow (update) No one can update the followings of any user.
     *   Request: No auth needed
     * @allow (delete) No one can delete the followings of any user.
     *   Request: No auth needed
     */
    match /users/{userId}/following/{followingId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Represents a private chat room between two or more users.
     * @path /chats/{chatId}
     * @allow (get) Only participants can read the chat.
     *   Request: auth.uid in resource.data.participantIds
     * @allow (list) Only participants can list chats.
     *   Request: auth.uid in resource.data.participantIds
     * @allow (create) Participants can create the chat.
     *   Request: auth.uid in request.resource.data.participantIds
     * @deny (update) Only participants can update the chat.
     *   Request: auth.uid in resource.data.participantIds
     * @deny (delete) Only participants can delete the chat.
     *   Request: auth.uid in resource.data.participantIds
     * @principle Enforces document access to participants.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
          return isSignedIn() && (resource.data.participantIds is list && resource.data.participantIds.hasAny([request.auth.uid]));
      }

      function isCreatingParticipant() {
        return isSignedIn() && (request.resource.data.participantIds is list && request.resource.data.participantIds.hasAny([request.auth.uid]));
      }

      allow get: if isParticipant();
      allow list: if isSignedIn();
      allow create: if isCreatingParticipant();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores the messages for a specific chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get) Only participants can read the messages.
     *   Request: auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
     * @allow (list) Only participants can list the messages.
     *   Request: auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
     * @allow (create) Only participants can create the messages.
     *   Request: auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
     * @deny (update) No one can update the messages.
     *   Request: No auth needed
     * @deny (delete) No one can delete the messages.
     *   Request: No auth needed
     * @principle Enforces document access to participants.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isChatParticipant(chatId) {
        return isSignedIn() && (get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds is list && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]));
      }

      allow get: if isChatParticipant(chatId);
      allow list: if isChatParticipant(chatId);
      allow create: if isChatParticipant(chatId);
      allow update: if false;
      allow delete: if false;
    }
  }
}