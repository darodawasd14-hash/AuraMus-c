/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data like user profiles and playlists.
 * Public data, such as the global song catalog, is readable by anyone, but writes are restricted.
 * Collaborative features like chats are secured using a shared-access pattern based on participant lists.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists, owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within playlists, owned by the user.
 * - /songs/{songId}: Public song catalog.
 * - /songs/{songId}/messages/{messageId}: Chat messages for songs, publicly accessible.
 * - /users/{userId}/followers/{followerId}: Followers of a user.
 * - /users/{userId}/following/{followingId}: Users a user is following.
 * - /chats/{chatId}: Private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a chat room.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profiles and playlists.
 * - The song catalog is publicly readable, but writes are restricted (no write rules implemented, which defaults to denying all writes).
 * - Chat rooms and messages are accessible only to participants.
 * - Listing of followers and following is allowed only to the user.
 *
 * Denormalization for Authorization:
 *  - Playlist and Song documents both have a `userId` field. This denormalization allows the rules to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId in the path.
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user's auth UID does not match the userId in the path.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the playlist.
     * @deny (create, get, list, update, delete) - If the user is not the owner of the playlist.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to songs within user playlists.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the playlist.
     * @deny (create, get, list, update, delete) - If the user is not the owner of the playlist.
     * @principle Enforces document ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Public access for reads.
     * @deny (create, update, delete) - Writes are not permitted.
     * @principle Allows public read access to the song catalog while restricting write access.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to chat messages for songs.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Public access for reads.
     * @deny (create, update, delete) - Writes are not permitted.
     * @principle Allows public read access to song messages while restricting write access.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the followers list for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create, get, list, update, delete) - If the user is the owner.
     * @deny (create, get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for managing followers.
     */
     match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the following list for a user.
     * @path /users/{userId}/following/{followingId}
     * @allow (create, get, list, update, delete) - If the user is the owner.
     * @deny (create, get, list, update, delete) - If the user is not the owner.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (create, get, list, update, delete) - If the user is a participant in the chat.
     * @deny (create, get, list, update, delete) - If the user is not a participant.
     * @principle Enforces shared access based on participant lists.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
          return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }

      allow get: if isParticipant();
      allow list: if false; // Listing chats is not allowed in this ruleset
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    /**
     * @description Controls access to messages within a chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create, get, list, update, delete) - If the user is a participant in the chat.
     * @deny (create, get, list, update, delete) - If the user is not a participant.
     * @principle Enforces shared access based on participant lists, inherited from the parent chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isParticipant() {
            return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        }

        allow get: if isParticipant();
        allow list: if isParticipant();
        allow create: if isParticipant();
        allow update: if false; // Updating messages is not allowed
        allow delete: if false; // Deleting messages is not allowed
    }
  }
}