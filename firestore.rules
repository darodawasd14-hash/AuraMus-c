/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. Users have full ownership of their profiles and playlists.
 * The songs collection is globally accessible for reading, but write access is restricted to ensure data integrity.
 * Messages are specific to songs and accessible to any authenticated user.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /users/{userId}/playlist/{songId}: User-specific playlists, accessible only by the owning user.
 * - /songs/{songId}: Global catalog of songs, publicly readable, with write access restricted.
 * - /songs/{songId}/messages/{messageId}: Messages for each song, accessible to all signed-in users.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is enabled for the /songs collection to allow discovery.
 * - Authorization decisions are made based on the authenticated user's ID (`request.auth.uid`).
 *
 * Denormalization for Authorization:
 * - The `Song` entity requires a `userId` field for owner-only write access to the global `/songs` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user-specific playlists. Only the authenticated user can manage their own playlist.
     * @path /users/{userId}/playlist/{songId}
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Restricts access to a user's own playlist.
     */
    match /users/{userId}/playlist/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to the global song catalog, but restrict writes to the owner.
     * @path /songs/{songId}
     * @allow (get, list) to all users
     * @allow (create) only if the userId field matches the authenticated user's ID.
     * @allow (update, delete) only to the song owner.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Implements public read with owner-only writes for the song catalog.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allow all signed-in users to read and write messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny  if the user is not signed in.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}