/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model, where users can only access their own data,
 * with public read access to the 'songs' collection and private messaging for each song.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/playlists/{playlistId}: Stores user playlists.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs for a specific playlist.
 * - /songs/{songId}: Stores a global catalog of songs.
 * - /songs/{songId}/messages/{messageId}: Stores messages for each song.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document and related subcollections (playlists, playlist songs).
 * - The 'songs' collection is publicly readable, but write access is restricted to the owner.
 * - Users can create messages related to songs, but write access is restricted to authenticated users.
 * - User listing is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 * - Playlist documents contain the userId to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the requested userId matches the authenticated user's ID.
     * @deny (read, write) if the user is not signed in or the requested userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read, write) if the user is signed in and the requested userId matches the authenticated user's ID.
     * @deny (read, write) if the user is not signed in or the requested userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isValidPlaylistCreate(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read, write) if the user is signed in and the requested userId matches the authenticated user's ID.
     * @deny (read, write) if the user is not signed in or the requested userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for playlist songs.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isPlaylistOwner(userId, playlistId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to songs in the global catalog. Public read, owner-only writes.
     * @path /songs/{songId}
     * @allow (get, list) to anyone.
     * @allow (create) only if the song.ownerId matches the authenticated user's ID.
     * @allow (update, delete) only if the user is the owner of the song.
     * @deny (create) if the song.ownerId does not match the authenticated user's ID.
     * @principle Allows public reading of songs, but restricts modifications to the owner.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to messages for a specific song. Authenticated users can create messages.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (create) if the user is signed in.
     * @deny (create) if the user is not signed in.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isValidPlaylistCreate(userId) {
      return isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
    }

    function isPlaylistOwner(userId, playlistId) {
        return get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == userId
               && isSignedIn();
    }
  }
}