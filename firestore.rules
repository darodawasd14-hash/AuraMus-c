/**
 * @fileoverview Firestore Security Rules for the Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * (users, playlists, songs in playlists, followers, following). Public data
 * (global songs, chat messages) is generally readable but write-protected.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists created by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist.
 * - /songs/{songId}: Global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for a song, publicly readable.
 * - /users/{userId}/followers/{followerId}: Users following a specific user.
 * - /users/{userId}/following/{followingId}: Users that a specific user is following.
 * - /chats/{chatId}: Private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a private chat room.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public song catalog allows read access to all users.
 * - Chat messages are publicly readable, but new messages are restricted to authenticated users.
 * - Follower/Following relationships are managed under each user's document.
 *
 * Denormalization for Authorization:
 * The rules rely on the `userId` field within playlist documents to match the
 * userId in the path, ensuring that playlists belong to the correct user.
 * Similarly, create operations on /users/{userId} validate that request.auth.uid matches userId.
 *
 * Structural Segregation:
 * Public songs are stored in a top-level collection (/songs), separate from
 * user-specific playlists and songs stored under /users/{userId}. This
 * segregation simplifies read access control for the public catalog.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', displayName: 'Test User', email: 'test@example.com' } } }
     * @allow (get) User with ID 'user123' can read their own profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', displayName: 'Updated Name' } } }
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - Request: { auth: { uid: 'user456' }, resource: { data: { id: 'user123', displayName: 'Test User', email: 'test@example.com' } } }
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     *   - Request: { auth: { uid: 'user456' }, resource: { data: { id: 'user123', displayName: 'Hacker' } } }
     * @deny (list) No one can list all the users.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @principle Enforces document ownership for writes, restricts listing to protect user privacy.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with ID 'user123' can create playlists under their profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', name: 'My Playlist' } } }
     * @allow (get) User with ID 'user123' can read playlists under their profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update playlists under their profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', name: 'Updated Playlist Name' } } }
     * @allow (delete) User with ID 'user123' can delete playlists under their profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create playlists under 'user123' profile.
     *   - Request: { auth: { uid: 'user456' }, resource: { data: { userId: 'user123', name: 'Hacker Playlist' } } }
     * @deny (update) User with ID 'user456' cannot update playlists under 'user123' profile.
     *   - Request: { auth: { uid: 'user456' }, resource: { data: { userId: 'user123', name: 'Hacked Playlist Name' } } }
     * @deny (list) User with ID 'user123' can list playlists under their profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership, validating userId matches the path.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores songs for a specific playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with ID 'user123' can add songs to their playlists.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (get) User with ID 'user123' can read songs in their playlists.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update songs in their playlists.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (delete) User with ID 'user123' can delete songs from their playlists.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot add songs to 'user123' playlists.
     *   - Request: { auth: { uid: 'user456' } }
     * @deny (update) User with ID 'user456' cannot update songs in 'user123' playlists.
     *   - Request: { auth: { uid: 'user456' } }
     * @deny (list) User with ID 'user123' can list songs in their playlists.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership, inheriting ownership from the parent playlist.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

       // Checks if the user owns the playlist
      function isPlaylistOwner(userId, playlistId) {
        return get(/databases/$(database)/documents/users/$(userId)/playlists/$(playlistId)).data.userId == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all songs added by any user, forming a global catalog.
     * @path /songs/{songId}
     * @allow (get) Any user can read song details.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (list) Any user can list songs.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (create) No one can create a new song.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (update) No one can update an existing song.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (delete) No one can delete a song.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @principle Public read access, restricted write access.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get) Any user can read messages for a song.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (list) Any user can list messages for a song.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (create) Only signed-in users can create messages for a song.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (update) No one can update a message.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (delete) No one can delete a message.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @principle Public read access, restricted write access for authenticated users.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores users who are following a specific user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (create) A user can be added to another user's followers list.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (get) A user's followers can be read.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) No one can update who is following whom.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (delete) A user can be removed from another user's followers list.
     *   - Request: { auth: { uid: 'user123' } }
     *  @deny (list) A user's follower list can only be read by the user.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership.
     */
    match /users/{userId}/followers/{followerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if true;
      allow list: if false;
      allow create: if request.auth.uid == followerId;
      allow update: if false;
      allow delete: if request.auth.uid == followerId;
    }

    /**
     * @description Stores users that a specific user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) A user can add to their following list.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (get) A user's following list can be read.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) No one can update who is following whom.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (delete) A user can remove from their following list.
     *   - Request: { auth: { uid: 'user123' } }
     *  @deny (list) A user's following list can only be read by the user.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership.
     */
    match /users/{userId}/following/{followingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if request.auth.uid == userId;
    }

    /**
     * @description Represents a private chat room between two or more users.
     * @path /chats/{chatId}
     * @allow (create) No one can create a new chat.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (get) Any participant can read the chat.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) Only participants can update the chat.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (delete) No one can delete a chat.
     *   - Request: { auth: { uid: 'anyUser' } }
     *  @deny (list) No one can list a chat.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @principle Shared access.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
          return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }

      allow get: if isSignedIn() && isParticipant(chatId);
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isParticipant(chatId);
      allow delete: if false;
    }

    /**
     * @description Stores the messages for a specific private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) Any participant can create a message.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (get) Any participant can read a message.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) No one can update a message.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @allow (delete) No one can delete a message.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @deny (list) No one can list a message.
     *   - Request: { auth: { uid: 'anyUser' } }
     * @principle Shared access.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        // Checks if the authenticated user is a participant in the chat
        function isChatParticipant(chatId) {
            return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        }

        allow get: if isSignedIn() && isChatParticipant(chatId);
        allow list: if false;
        allow create: if isSignedIn() && isChatParticipant(chatId);
        allow update: if false;
        allow delete: if false;
    }
  }
}