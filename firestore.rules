/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to the 'songs' collection with owner-only writes.
 * @data_structure All user-specific data is nested under /users/{userId}. The 'songs' collection
 * is a top-level collection with public read access.
 * @key_security_decisions User listing is disallowed. The 'songs' collection implements a
 * public-read, owner-write pattern.
 * @denormalization Authorization decisions are made based on the `userId` field within
 * documents, avoiding costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can read, create, update, and delete their own profile document at /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot read, create, update, or delete the profile document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure user playlists. Only the owner can manage their own playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (get, create, update, delete) User 'user123' can manage their playlist with ID 'playlist456' under /users/user123/playlists/playlist456.
     * @deny (get, create, update, delete) User 'user456' cannot manage playlist 'playlist456' under /users/user123/playlists/playlist456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure songs within a playlist. Only the playlist owner can manage songs in their playlists.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (get, create, update, delete) User 'user123' can manage song 'song789' in their playlist 'playlist456' under /users/user123/playlists/playlist456/songs/song789.
     * @deny (get, create, update, delete) User 'user456' cannot manage song 'song789' in playlist 'playlist456' under /users/user123/playlists/playlist456/songs/song789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allow public read access to songs, but restrict writes to owners.
     * @path /songs/{songId}
     * @allow (get, list) Any user can read the song document at /songs/song123.
     * @allow (create) User 'user123' can create a song document at /songs/song456 if request.resource.data.ownerId == 'user123'.
     * @allow (update, delete) User 'user123' can update/delete the song document at /songs/song456 if resource.data.ownerId == 'user123'.
     * @deny (create) User 'user123' cannot create a song document at /songs/song456 if request.resource.data.ownerId != 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete the song document at /songs/song456 if resource.data.ownerId == 'user123'.
     * @principle Public read access with owner-only writes.
     */
    match /songs/{songId} {
       allow get, list: if true;
        allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if request.auth != null && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if request.auth != null && resource != null;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure messages for a specific song. Only authenticated users can create messages.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) Any user can read messages for song 'song123' under /songs/song123/messages.
     * @allow (create) Authenticated user can create a message for song 'song123' under /songs/song123/messages.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Authenticated users can create messages, but no updates or deletes.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the followers subcollection. Only the owner can list their own followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, create, update, delete) User with ID 'user123' can read, create, update, and delete their own profile document at /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot read, create, update, or delete the profile document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

      /**
       * @description  Secure the following subcollection. Only the owner can list the users they are following.
       * @path /users/{userId}/following/{followingId}
       * @allow (get, create, update, delete) User with ID 'user123' can read, create, update, and delete their own profile document at /users/user123.
       * @deny (get, create, update, delete) User with ID 'user456' cannot read, create, update, or delete the profile document at /users/user123.
       * @principle Enforces document ownership for all operations.
       */
      match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
  }
}