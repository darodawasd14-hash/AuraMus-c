rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data and write (create/update) their own profile data.
     * @path /users/{userId}
     * @allow (read) request.auth != null - Any authenticated user can read any user's profile data.
     * @allow (create/update) request.auth.uid == userId - Only the user with the matching ID can create or update their profile.
     * @deny (create/update) request.auth.uid != userId - A different user attempts to create or update this profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (read) request.auth != null - Any authenticated user can read any user's playlist metadata.
     * @allow (create/update/delete) request.auth.uid == userId - Only the user with the matching ID can create, update, or delete playlists.
     * @deny (create/update/delete) request.auth.uid != userId - A different user attempts to modify this playlist.
     * @principle Enforces user-ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own songs within a playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (read) request.auth != null - Any authenticated user can read any song inside a user's playlist.
     * @allow (create/update/delete) request.auth.uid == userId - Only the user with the matching ID can create, update, or delete songs within their own playlists.
     * @deny (create/update/delete) request.auth.uid != userId - A different user attempts to modify songs in this playlist.
     * @principle Enforces user-ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read songs from the global catalog, but restricts write access.
     * @path /songs/{songId}
     * @allow (read) true - Anyone can read song data from the global catalog.
     * @deny (create/update/delete) false - No one can create, update or delete global song data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access for the global song catalog, requires owner-only writes.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read messages for a specific song (public chat). Write access is restricted (TODO: to song participants).
     * @path /songs/{songId}/messages/{messageId}
     * @allow (read) true - Anyone can read chat messages for a song.
     * @deny (create/update/delete) false - No one can create, update, or delete chat messages.  // TODO: Add participant validation.
     * @principle Allows public read access for song chat, requires participant-only writes.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add participant validation.
      allow update: if false; // TODO: Add participant validation.
      allow delete: if false; // TODO: Add participant validation.
    }
    /**
     * @description Allows users to read and write to their own followers list.
     * @path /users/{userId}/followers/{followerId}
     *  @allow (read) request.auth != null - Any authenticated user can read any user's followers.
     * @allow (create/update/delete) request.auth.uid == userId - Only the user with the matching ID can create, update, or delete followers.
     * @deny (create/update/delete) request.auth.uid != userId - A different user attempts to modify followers.
     * @principle Enforces user-ownership for follower lists.
     */
      match /users/{userId}/followers/{followerId} {
          allow get: if isSignedIn();
          allow list: if isOwner(userId);
          allow create: if isSignedIn() && request.auth.uid == userId;
          allow update: if isSignedIn() && request.auth.uid == userId;
          allow delete: if isSignedIn() && request.auth.uid == userId;
      }

      /**
       * @description Allows users to read and write to their own following list.
       * @path /users/{userId}/following/{followingId}
       *  @allow (read) request.auth != null - Any authenticated user can read any user's following list.
       * @allow (create/update/delete) request.auth.uid == userId - Only the user with the matching ID can create, update, or delete following entries.
       * @deny (create/update/delete) request.auth.uid != userId - A different user attempts to modify following entries.
       * @principle Enforces user-ownership for following lists.
       */
      match /users/{userId}/following/{followingId} {
          allow get: if isSignedIn();
          allow list: if isOwner(userId);
          allow create: if isSignedIn() && request.auth.uid == userId;
          allow update: if isSignedIn() && request.auth.uid == userId;
          allow delete: if isSignedIn() && request.auth.uid == userId;
      }
    /**
     * @description Allows members of a chat to read and write to the chat document.
     * @path /chats/{chatId}
     * @allow (read) request.auth.uid in resource.data.participantIds - Only participants can read.
     * @allow (create/update/delete) request.auth.uid in resource.data.participantIds - Only participants can write.
     * @deny (read) request.auth.uid not in resource.data.participantIds - Non-participants cannot read.
     * @deny (create/update/delete) request.auth.uid not in resource.data.participantIds - Non-participants cannot write.
     * @principle Enforces shared access for chats.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Chats should not be deleted, but maybe archived.
    }

    /**
     * @description Allows members of a chat to read and write messages.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read) request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds - Only participants can read.
     * @allow (create/update/delete) request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds - Only participants can write.
     * @deny (read) request.auth.uid not in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds - Non-participants cannot read.
     * @deny (create/update/delete) request.auth.uid not in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds - Non-participants cannot write.
     * @principle Enforces shared access for chat messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isChatParticipant(chatId);
      allow list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update: if isSignedIn() && isChatParticipant(chatId);
      allow delete: if isSignedIn() && isChatParticipant(chatId);
    }
  }
  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isChatParticipant(chatId) {
    return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
  }
}