/**
 * @file Firestore Security Rules for Aura Application
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data (users, playlists, songs under playlists)
 *  and a shared-access model for chats. Public read access is granted to the global song catalog.
 * @data_structure
 *  - /users/{userId}: User profiles, owned by the user.
 *  - /users/{userId}/playlists/{playlistId}: Playlists, owned by the user.
 *  - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within playlists, owned by the user.
 *  - /songs/{songId}: Public song catalog, readable by all, writable only with correct ownerId.
 *  - /songs/{songId}/messages/{messageId}: Chat messages for songs, open to all.
 *  - /users/{userId}/followers/{followerId}: Follow relationships, owner can list
 *  - /users/{userId}/following/{followingId}: Following relationships, owner can list
 *  - /chats/{chatId}: Chat rooms, access controlled by participant list.
 *  - /chats/{chatId}/messages/{messageId}: Chat messages, access controlled by chat room participants.
 * @key_security_decisions
 *  - Users can only access their own data.
 *  - Public read access to the global song catalog.
 *  - Chat access is controlled by membership in the chat document.
 *  - User listing is disallowed.
 * @denormalization_for_authorization
 *  - Song documents in the global catalog must have an `ownerId` field to control write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) User with matching ID can create playlists under their profile.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, and delete their playlists.
     * @deny (create) User cannot create playlists under another user's profile.
     * @deny (get, list, update, delete) User cannot access another user's playlists.
     * @principle Enforces document ownership for playlists.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) User with matching ID can add songs to their playlists.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, and delete songs in their playlists.
     * @deny (create) User cannot add songs to another user's playlists.
     * @deny (get, list, update, delete) User cannot access songs in another user's playlists.
     * @principle Enforces document ownership for songs within playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) Anyone can read the song catalog.
     * @allow (create) Only the song's owner can create it, and the ownerId must match.
     * @allow (update, delete) Only the song's owner can update or delete it.
     * @deny (create) If the ownerId field doesn't match the user's ID.
     * @principle Public read access with owner-only writes to the song catalog.
     */
    match /songs/{songId} {
        allow get, list: if true;
        allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list, create) Any signed-in user can read and create messages.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Open access for chat messages.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the list of followers for a user.
     * @path /users/{userId}/followers/{followerId}
     * @allow (list) The owner can list their followers.
     * @allow (create) The owner can create their followers.
     * @deny (get, update, delete) Not allowed.
     * @principle Owner can read/write their followers.
     */
    match /users/{userId}/followers/{followerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow get, update, delete: if false;
    }

    /**
     * @description Controls access to the list of users a user is following.
     * @path /users/{userId}/following/{followingId}
     * @allow (list) The owner can list the users they are following.
     * @allow (create) The owner can create the users they are following.
     * @deny (get, update, delete) Not allowed.
     * @principle Owner can read/write the users they are following.
     */
    match /users/{userId}/following/{followingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow get, update, delete: if false;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get, list) Only participants can read/list chat rooms.
     * @allow (create) Only participants can create chat rooms.
     * @allow (update) Only participants can update chat rooms.
     * @deny (delete) No one can delete chat rooms.
     * @principle Shared access: Only chat participants have access.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(participantIds) {
          return isSignedIn() && participantIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow delete: if false;
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list, create) Only participants of the chat can read/list/create messages.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Shared access: Only chat participants have access.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
           return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }

      allow get, list, create: if isSignedIn() && isParticipant(chatId);
      allow update, delete: if false;
    }
  }
}