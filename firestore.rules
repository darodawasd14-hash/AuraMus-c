/**
 * @file Overview
 * This ruleset enforces a user-centric security model for the Aura application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured with owner-only access.
 * - /users/{userId}/playlists/{playlistId}: Stores playlists for each user, secured with owner-only access.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Stores songs for a specific playlist, secured with owner-only access.
 * - /songs/{songId}: Stores all songs, publicly readable but with owner-only writes (if an owner ID is present).
 * - /songs/{songId}/messages/{messageId}: Stores chat messages for songs, accessible to any signed-in user.
 * - /users/{userId}/followers/{followerId}: Stores a list of followers for a user, readable by any signed-in user, writable by the followed user.
 * - /users/{userId}/following/{followingId}: Stores a list of users a user is following, readable by any signed-in user, writable by the followed user.
 * - /chats/{chatId}: Represents private chat rooms between users.
 * - /chats/{chatId}/messages/{messageId}: Stores messages for each chat room.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles and playlists.
 * - Song data is publicly readable to facilitate discovery but writable only by the owner (if ownership can be established).
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `request.auth.uid` variable for identity verification and enforce that user IDs in paths match the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user-created playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - A user can create playlists under their own user ID.
     * @allow (get, list, update, delete) - A user can only manage their own playlists.
     * @deny (create) - A user cannot create playlists for another user.
     * @deny (get, list, update, delete) - A user cannot manage another user's playlists.
     * @principle Enforces document ownership for playlist management.
     */
    match /users/{userId}/playlists/{playlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - A user can add songs to their own playlist.
     * @allow (get, list, update, delete) - A user can only manage songs in their own playlists.
     * @deny (create) - A user cannot add songs to another user's playlist.
     * @deny (get, list, update, delete) - A user cannot manage songs in another user's playlists.
     * @principle Enforces document ownership for managing songs in playlists.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Any user can read song information.
     * @allow (create, update, delete) - Only the owner can modify song information.
     * @deny (create, update, delete) - Non-owners cannot modify song information.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to chat messages for a specific song.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Any signed-in user can read messages.
     * @allow (create) - Any signed-in user can create messages.
     * @deny (update, delete) - No user can update or delete messages.
     * @principle Allows any signed-in user to participate in song-specific chats.
     */
    match /songs/{songId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Controls access to a user's list of followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) - Any signed-in user can view the followers of a user.
     * @allow (create) - Allows the user being followed to add followers (the uid field must match the followerId).
     * @deny (update, delete) - Followers cannot be directly updated or deleted (follow/unfollow actions are creates/deletes).
     * @principle Allows public read access to follower lists, with the followed user controlling the list.
     */
    match /users/{userId}/followers/{followerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to a user's list of users they are following.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) - Any signed-in user can view who a user is following.
     * @allow (create) - Allows a user to add to their following list (the uid field must match the followingId).
     * @deny (update, delete) - Following relationships cannot be directly updated or deleted (follow/unfollow actions are creates/deletes).
     * @principle Allows public read access to following lists, with the user controlling the list.
     */
    match /users/{userId}/following/{followingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to private chat rooms.
     * @path /chats/{chatId}
     * @allow (get) - Only participants can get a chat.
     * @allow (create) - Any user can create a chat.
     * @allow (update) - Only participants can update a chat.
     * @allow (delete) - Only participants can delete a chat.
     * @allow (list) -  No listing
     * @principle Enforces that only chat participants have access to the chat.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant() {
        return request.resource.data.participantIds.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn() && isParticipant();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isParticipant();
      allow delete: if isSignedIn() && isParticipant();
    }

    /**
     * @description Controls access to messages within a private chat room.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Only participants can read messages in the chat.
     * @allow (create) - Only participants can create messages in the chat.
     * @deny (update, delete) - No user can update or delete messages.
     * @principle Enforces that only chat participants can exchange messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isChatParticipant() {
          return get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
      allow get: if isSignedIn() && isChatParticipant();
      allow list: if isSignedIn() && isChatParticipant();
      allow create: if isSignedIn() && isChatParticipant();
      allow update: if false;
      allow delete: if false;
    }
  }
}