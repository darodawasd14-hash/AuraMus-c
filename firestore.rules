/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and playlists.
 * Users can only access their own profile data and manage their own playlists.
 * A public songs collection exists for all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/playlist/{songId}: Stores songs in a user's playlist.
 * - /songs/{songId}: Stores all songs in a global catalog.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only manage songs in their own playlist.
 * - The global /songs collection is publicly readable, but only owners can create, update, or delete songs they created.
 *
 * Denormalization for Authorization:
 * - The `Song` entity contains a `userId` field to simplify ownership checks for songs in both the user's playlist and the global songs collection.
 *
 * Structural Segregation:
 * - User-specific playlists are stored in a subcollection of the user's document, ensuring privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their own profile.
     * @allow (get, update, delete) User with matching userId can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a different userId.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to a user's personal playlist.
     * @path /users/{userId}/playlist/{songId}
     * @allow (create) User with matching userId can add songs to their playlist.
     * @allow (get, list, update, delete) User with matching userId can read, list, update, and delete songs in their own playlist.
     * @deny (create) User cannot add songs to another user's playlist.
     * @deny (get, list, update, delete) User cannot read, list, update, or delete songs in another user's playlist.
     * @principle Enforces document ownership for user playlists.
     */
    match /users/{userId}/playlist/{songId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the global songs collection.
     * @path /songs/{songId}
     * @allow (get, list) All users can read the global song catalog.
     * @allow (create) User can create a song if the userId matches their own.
     * @allow (update, delete) Only the song owner can update or delete a song, and only if the song exists.
     * @deny (create) User cannot create a song with a different userId.
     * @deny (update, delete) User cannot update or delete another user's song.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /songs/{songId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}