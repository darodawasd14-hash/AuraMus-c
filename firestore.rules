/**
 * @fileoverview Firestore Security Rules for Aura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data like user profiles and playlists.
 * Public access is granted to the global song catalog, but writes are restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /users/{userId}/playlists/{playlistId}: Playlists owned by the user.
 * - /users/{userId}/playlists/{playlistId}/songs/{songId}: Songs within a user's playlist.
 * - /songs/{songId}: Global catalog of songs, publicly readable.
 * - /songs/{songId}/messages/{messageId}: Chat messages for songs, writeable by authenticated users.
 * - /users/{userId}/followers/{followerId}: List of followers for a user.
 * - /users/{userId}/following/{followingId}: List of users a user is following.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and playlists.
 * - The global song catalog is publicly readable, but only authenticated users can create/modify songs.
 * - User listing is explicitly disallowed.
 * - Followers and Following subcollections are secured to the owner.
 *
 * Denormalization for Authorization:
 *  - The 'Playlist' entity contains a 'userId' field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile with ID 'user123'.
     * @deny (create) - User with UID 'user123' cannot create a profile with ID 'user456'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile (ID 'user123').
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete profile with ID 'user456'.
     * @principle Enforces document ownership for writes and reads.  Validates relational integrity on create and enforces immutability.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user playlists.
     * @path /users/{userId}/playlists/{playlistId}
     * @allow (create) - User with UID 'user123' can create a playlist under their user ID.
     * @deny (create) - User with UID 'user123' cannot create a playlist under another user's ID.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update and delete their own playlists.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update or delete playlists belonging to another user.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for songs within a user's playlist.
     * @path /users/{userId}/playlists/{playlistId}/songs/{songId}
     * @allow (create) - User with UID 'user123' can create songs in their own playlist.
     * @deny (create) - User with UID 'user123' cannot create songs in another user's playlist.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete songs in their own playlists.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update or delete songs in another user's playlist.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/playlists/{playlistId}/songs/{songId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the global song catalog.
     * @path /songs/{songId}
     * @allow (get, list) - Anyone can read the song catalog.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete songs.
     * @principle Public read, owner-only writes for the song catalog.
     */
    match /songs/{songId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for chat messages for songs.
     * @path /songs/{songId}/messages/{messageId}
     * @allow (get, list) - Anyone can read messages for a song.
     * @allow (create) - Only authenticated users can create messages.
     * @deny (update, delete) - No one can update or delete messages.
     * @principle Public read, authenticated user writes.
     */
    match /songs/{songId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Rules for user followers.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get, list) - Only the owner of the profile can read their followers.
     * @allow (create) - Only the owner of the profile can create a follower entry.
     * @deny (update, delete) - No one can update or delete follower entries.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/followers/{followerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for users being followed.
     * @path /users/{userId}/following/{followingId}
     * @allow (get, list) - Only the owner of the profile can read who they are following.
     * @allow (create) - Only the owner of the profile can create a following entry.
     * @deny (update, delete) - No one can update or delete following entries.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/following/{followingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }
}